#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
    uint16_t as cuint16_t,
    uint32_t as cuint32_t,
)
from libcpp.string cimport string
from libcpp cimport bool as cbool, nullptr, nullptr_t
from cpython cimport bool as pbool
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap, pair as cpair
from libcpp.unordered_map cimport unordered_map as cumap
cimport folly.iobuf as _fbthrift_iobuf
from thrift.python.exceptions cimport cTException
from thrift.py3.types cimport (
    bstring,
    field_ref as __field_ref,
    optional_field_ref as __optional_field_ref,
    required_field_ref as __required_field_ref,
    terse_field_ref as __terse_field_ref,
    union_field_ref as __union_field_ref,
    get_union_field_value as __get_union_field_value,
)
from thrift.python.common cimport cThriftMetadata as __fbthrift_cThriftMetadata



cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_metadata.h" namespace "apache::thrift::detail::md":
    cdef cppclass EnumMetadata[T]:
        @staticmethod
        void gen(__fbthrift_cThriftMetadata &metadata)
cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_types.h" namespace "::cpp2":
    cdef cppclass cEmptyEnum "::cpp2::EmptyEnum":
        pass

    cdef cppclass cCity "::cpp2::City":
        pass

    cdef cppclass cCompany "::cpp2::Company":
        pass

cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_metadata.h" namespace "apache::thrift::detail::md":
    cdef cppclass ExceptionMetadata[T]:
        @staticmethod
        void gen(__fbthrift_cThriftMetadata &metadata)
cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_metadata.h" namespace "apache::thrift::detail::md":
    cdef cppclass StructMetadata[T]:
        @staticmethod
        void gen(__fbthrift_cThriftMetadata &metadata)
cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_types_custom_protocol.h" namespace "::cpp2":

    cdef cppclass cInternship "::cpp2::Internship":
        cInternship() except +
        cInternship(const cInternship&) except +
        bint operator==(cInternship&)
        bint operator!=(cInternship&)
        bint operator<(cInternship&)
        bint operator>(cInternship&)
        bint operator<=(cInternship&)
        bint operator>=(cInternship&)
        __required_field_ref[cint32_t] weeks_ref "weeks_ref" ()
        __field_ref[string] title_ref "title_ref" ()
        __optional_field_ref[cCompany] employer_ref "employer_ref" ()
        __optional_field_ref[double] compensation_ref "compensation_ref" ()
        __optional_field_ref[string] school_ref "school_ref" ()


    cdef cppclass cRange "::cpp2::Range":
        cRange() except +
        cRange(const cRange&) except +
        bint operator==(cRange&)
        bint operator!=(cRange&)
        bint operator<(cRange&)
        bint operator>(cRange&)
        bint operator<=(cRange&)
        bint operator>=(cRange&)
        __required_field_ref[cint32_t] min_ref "min_ref" ()
        __required_field_ref[cint32_t] max_ref "max_ref" ()


    cdef cppclass cstruct1 "::cpp2::struct1":
        cstruct1() except +
        cstruct1(const cstruct1&) except +
        bint operator==(cstruct1&)
        bint operator!=(cstruct1&)
        bint operator<(cstruct1&)
        bint operator>(cstruct1&)
        bint operator<=(cstruct1&)
        bint operator>=(cstruct1&)
        __field_ref[cint32_t] a_ref "a_ref" ()
        __field_ref[string] b_ref "b_ref" ()


    cdef cppclass cstruct2 "::cpp2::struct2":
        cstruct2() except +
        cstruct2(const cstruct2&) except +
        bint operator==(cstruct2&)
        bint operator!=(cstruct2&)
        bint operator<(cstruct2&)
        bint operator>(cstruct2&)
        bint operator<=(cstruct2&)
        bint operator>=(cstruct2&)
        __field_ref[cint32_t] a_ref "a_ref" ()
        __field_ref[string] b_ref "b_ref" ()
        __field_ref[cstruct1] c_ref "c_ref" ()
        __field_ref[vector[cint32_t]] d_ref "d_ref" ()


    cdef cppclass cstruct3 "::cpp2::struct3":
        cstruct3() except +
        cstruct3(const cstruct3&) except +
        bint operator==(cstruct3&)
        bint operator!=(cstruct3&)
        bint operator<(cstruct3&)
        bint operator>(cstruct3&)
        bint operator<=(cstruct3&)
        bint operator>=(cstruct3&)
        __field_ref[string] a_ref "a_ref" ()
        __field_ref[cint32_t] b_ref "b_ref" ()
        __field_ref[cstruct2] c_ref "c_ref" ()


    cdef cppclass cstruct4 "::cpp2::struct4":
        cstruct4() except +
        cstruct4(const cstruct4&) except +
        bint operator==(cstruct4&)
        bint operator!=(cstruct4&)
        bint operator<(cstruct4&)
        bint operator>(cstruct4&)
        bint operator<=(cstruct4&)
        bint operator>=(cstruct4&)
        __field_ref[cint32_t] a_ref "a_ref" ()
        __optional_field_ref[double] b_ref "b_ref" ()
        __optional_field_ref[cint8_t] c_ref "c_ref" ()

    cdef enum cunion1__type "::cpp2::union1::Type":
        cunion1__type___EMPTY__ "::cpp2::union1::Type::__EMPTY__",
        cunion1__type_i "::cpp2::union1::Type::i",
        cunion1__type_d "::cpp2::union1::Type::d",

    cdef cppclass cunion1 "::cpp2::union1":
        cunion1() except +
        cunion1(const cunion1&) except +
        bint operator==(cunion1&)
        bint operator!=(cunion1&)
        bint operator<(cunion1&)
        bint operator>(cunion1&)
        bint operator<=(cunion1&)
        bint operator>=(cunion1&)
        cunion1__type getType() const
        const cint32_t& get_i "get_i" () const
        cint32_t& set_i "set_i" (const cint32_t&)
        const double& get_d "get_d" () const
        double& set_d "set_d" (const double&)

    cdef enum cunion2__type "::cpp2::union2::Type":
        cunion2__type___EMPTY__ "::cpp2::union2::Type::__EMPTY__",
        cunion2__type_i "::cpp2::union2::Type::i",
        cunion2__type_d "::cpp2::union2::Type::d",
        cunion2__type_s "::cpp2::union2::Type::s",
        cunion2__type_u "::cpp2::union2::Type::u",

    cdef cppclass cunion2 "::cpp2::union2":
        cunion2() except +
        cunion2(const cunion2&) except +
        bint operator==(cunion2&)
        bint operator!=(cunion2&)
        bint operator<(cunion2&)
        bint operator>(cunion2&)
        bint operator<=(cunion2&)
        bint operator>=(cunion2&)
        cunion2__type getType() const
        const cint32_t& get_i "get_i" () const
        cint32_t& set_i "set_i" (const cint32_t&)
        const double& get_d "get_d" () const
        double& set_d "set_d" (const double&)
        const cstruct1& get_s "get_s" () const
        cstruct1& set_s "set_s" (const cstruct1&)
        const cunion1& get_u "get_u" () const
        cunion1& set_u "set_u" (const cunion1&)

cdef extern from "thrift/compiler/test/fixtures/constants/gen-cpp2/module_constants.h" namespace "::cpp2":
    cdef cint32_t cmyInt "::cpp2::module_constants::myInt"
    cdef const char* cname "::cpp2::module_constants::name"()
    cdef const char* cmulti_line_string "::cpp2::module_constants::multi_line_string"()
    cdef vector[cmap[string,cint32_t]] cstates "::cpp2::module_constants::states"()
    cdef double cx "::cpp2::module_constants::x"
    cdef double cy "::cpp2::module_constants::y"
    cdef double cz "::cpp2::module_constants::z"
    cdef double czeroDoubleValue "::cpp2::module_constants::zeroDoubleValue"
    cdef double clongDoubleValue "::cpp2::module_constants::longDoubleValue"
    cdef string cbin "::cpp2::module_constants::bin"()
    cdef cCompany cmy_company "::cpp2::module_constants::my_company"()
    cdef const char* cfoo "::cpp2::module_constants::foo"()
    cdef cint32_t cbar "::cpp2::module_constants::bar"
    cdef cmap[string,string] cmymap "::cpp2::module_constants::mymap"()
    cdef vector[cCompany] cmy_apps "::cpp2::module_constants::my_apps"()
    cdef cInternship cinstagram "::cpp2::module_constants::instagram"()
    cdef cInternship cpartial_const "::cpp2::module_constants::partial_const"()
    cdef vector[cRange] ckRanges "::cpp2::module_constants::kRanges"()
    cdef vector[cInternship] cinternList "::cpp2::module_constants::internList"()
    cdef cstruct1 cpod_0 "::cpp2::module_constants::pod_0"()
    cdef cstruct1 cpod_s_0 "::cpp2::module_constants::pod_s_0"()
    cdef cstruct1 cpod_1 "::cpp2::module_constants::pod_1"()
    cdef cstruct1 cpod_s_1 "::cpp2::module_constants::pod_s_1"()
    cdef cstruct2 cpod_2 "::cpp2::module_constants::pod_2"()
    cdef cstruct2 cpod_trailing_commas "::cpp2::module_constants::pod_trailing_commas"()
    cdef cstruct2 cpod_s_2 "::cpp2::module_constants::pod_s_2"()
    cdef cstruct3 cpod_3 "::cpp2::module_constants::pod_3"()
    cdef cstruct3 cpod_s_3 "::cpp2::module_constants::pod_s_3"()
    cdef cstruct4 cpod_4 "::cpp2::module_constants::pod_4"()
    cdef cunion1 cu_1_1 "::cpp2::module_constants::u_1_1"()
    cdef cunion1 cu_1_2 "::cpp2::module_constants::u_1_2"()
    cdef cunion1 cu_1_3 "::cpp2::module_constants::u_1_3"()
    cdef cunion2 cu_2_1 "::cpp2::module_constants::u_2_1"()
    cdef cunion2 cu_2_2 "::cpp2::module_constants::u_2_2"()
    cdef cunion2 cu_2_3 "::cpp2::module_constants::u_2_3"()
    cdef cunion2 cu_2_4 "::cpp2::module_constants::u_2_4"()
    cdef cunion2 cu_2_5 "::cpp2::module_constants::u_2_5"()
    cdef cunion2 cu_2_6 "::cpp2::module_constants::u_2_6"()
    cdef const char* capostrophe "::cpp2::module_constants::apostrophe"()
    cdef const char* ctripleApostrophe "::cpp2::module_constants::tripleApostrophe"()
    cdef const char* cquotationMark "::cpp2::module_constants::quotationMark"()
    cdef const char* cbackslash "::cpp2::module_constants::backslash"()
    cdef const char* cescaped_a "::cpp2::module_constants::escaped_a"()
    cdef cmap[string,cint32_t] cchar2ascii "::cpp2::module_constants::char2ascii"()
    cdef vector[string] cescaped_strings "::cpp2::module_constants::escaped_strings"()
    cdef vector[string] cunicode_list "::cpp2::module_constants::unicode_list"()
    cdef cbool cfalse_c "::cpp2::module_constants::false_c"
    cdef cbool ctrue_c "::cpp2::module_constants::true_c"
    cdef cint8_t czero_byte "::cpp2::module_constants::zero_byte"
    cdef cint16_t czero16 "::cpp2::module_constants::zero16"
    cdef cint32_t czero32 "::cpp2::module_constants::zero32"
    cdef cint64_t czero64 "::cpp2::module_constants::zero64"
    cdef double czero_dot_zero "::cpp2::module_constants::zero_dot_zero"
    cdef const char* cempty_string "::cpp2::module_constants::empty_string"()
    cdef vector[cint32_t] cempty_int_list "::cpp2::module_constants::empty_int_list"()
    cdef vector[string] cempty_string_list "::cpp2::module_constants::empty_string_list"()
    cdef cset[cint32_t] cempty_int_set "::cpp2::module_constants::empty_int_set"()
    cdef cset[string] cempty_string_set "::cpp2::module_constants::empty_string_set"()
    cdef cmap[cint32_t,cint32_t] cempty_int_int_map "::cpp2::module_constants::empty_int_int_map"()
    cdef cmap[cint32_t,string] cempty_int_string_map "::cpp2::module_constants::empty_int_string_map"()
    cdef cmap[string,cint32_t] cempty_string_int_map "::cpp2::module_constants::empty_string_int_map"()
    cdef cmap[string,string] cempty_string_string_map "::cpp2::module_constants::empty_string_string_map"()
    cdef cmap[string,string] cunicode_map "::cpp2::module_constants::unicode_map"()
    cdef cint64_t cmaxIntDec "::cpp2::module_constants::maxIntDec"
    cdef cint64_t cmaxIntOct "::cpp2::module_constants::maxIntOct"
    cdef cint64_t cmaxIntHex "::cpp2::module_constants::maxIntHex"
    cdef cint64_t cmaxIntBin "::cpp2::module_constants::maxIntBin"
    cdef double cmaxDub "::cpp2::module_constants::maxDub"
    cdef double cminDub "::cpp2::module_constants::minDub"
    cdef double cminSDub "::cpp2::module_constants::minSDub"
    cdef cint64_t cmaxPIntDec "::cpp2::module_constants::maxPIntDec"
    cdef cint64_t cmaxPIntOct "::cpp2::module_constants::maxPIntOct"
    cdef cint64_t cmaxPIntHex "::cpp2::module_constants::maxPIntHex"
    cdef cint64_t cmaxPIntBin "::cpp2::module_constants::maxPIntBin"
    cdef double cmaxPDub "::cpp2::module_constants::maxPDub"
    cdef double cminPDub "::cpp2::module_constants::minPDub"
    cdef double cminPSDub "::cpp2::module_constants::minPSDub"
    cdef cint64_t cminIntDec "::cpp2::module_constants::minIntDec"
    cdef cint64_t cminIntOct "::cpp2::module_constants::minIntOct"
    cdef cint64_t cminIntHex "::cpp2::module_constants::minIntHex"
    cdef cint64_t cminIntBin "::cpp2::module_constants::minIntBin"
    cdef double cmaxNDub "::cpp2::module_constants::maxNDub"
    cdef double cminNDub "::cpp2::module_constants::minNDub"
    cdef double cminNSDub "::cpp2::module_constants::minNSDub"
    cdef cmap[cint32_t,cbool] cI2B "::cpp2::module_constants::I2B"()
    cdef cmap[cint32_t,cbool] cI2B_REF "::cpp2::module_constants::I2B_REF"()
