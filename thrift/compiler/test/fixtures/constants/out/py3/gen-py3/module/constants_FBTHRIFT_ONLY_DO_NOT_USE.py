#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
import thrift.py3.types

import module.types as _module_types

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    List__i32,
    Map__string_i32,
    List__Map__string_i32,
    Map__string_string,
    List__Company,
    List__Range,
    List__Internship,
    List__string,
    Set__i32,
    Set__string,
    Map__i32_i32,
    Map__i32_string,
    Map__i32_bool,
)

myInt = 1337
name = "Mark Zuckerberg"
multi_line_string = "This\nis a\nmulti line string.\n"
states = List__Map__string_i32((Map__string_i32( { "San Diego": 3211000, "Sacramento": 479600, "SF": 837400 }), Map__string_i32( { "New York": 8406000, "Albany": 98400 }), ))
x = 1
y = 1000000.0
z = 1000000000
zeroDoubleValue = 0
longDoubleValue = 2.59961000990301e-05
bin = b"a\000z"
my_company = _module_types.Company.FACEBOOK
foo = "foo"
bar = 42
mymap = Map__string_string( { "keys": "values" })
my_apps = List__Company((_module_types.Company.FACEBOOK, _module_types.Company._Company__FRIEND__FEED, ))
instagram = _module_types.Internship(weeks=12, title="Software Engineer", employer=_module_types.Company.INSTAGRAM, compensation=1200, school="Monters University")
partial_const = _module_types.Internship(weeks=8, title="Some Job")
kRanges = List__Range((_module_types.Range(min=1, max=2), _module_types.Range(min=5, max=6), ))
internList = List__Internship((_module_types.Internship(weeks=12, title="Software Engineer", employer=_module_types.Company.INSTAGRAM, compensation=1200, school="Monters University"), _module_types.Internship(weeks=10, title="Sales Intern", employer=_module_types.Company.FACEBOOK, compensation=1000), ))
pod_0 = _module_types.struct1()
pod_s_0 = _module_types.struct1()
pod_1 = _module_types.struct1(a=10, b="foo")
pod_s_1 = _module_types.struct1(a=10, b="foo")
pod_2 = _module_types.struct2(a=98, b="gaz", c=_module_types.struct1(a=12, b="bar"), d=List__i32((11, 22, 33, )))
pod_trailing_commas = _module_types.struct2(a=98, b="gaz", c=_module_types.struct1(a=12, b="bar"), d=List__i32((11, 22, 33, )))
pod_s_2 = _module_types.struct2(a=98, b="gaz", c=_module_types.struct1(a=12, b="bar"), d=List__i32((11, 22, 33, )))
pod_3 = _module_types.struct3(a="abc", b=456, c=_module_types.struct2(a=888, c=_module_types.struct1(b="gaz"), d=List__i32((1, 2, 3, ))))
pod_s_3 = _module_types.struct3(a="abc", b=456, c=_module_types.struct2(a=888, c=_module_types.struct1(b="gaz"), d=List__i32((1, 2, 3, ))))
pod_4 = _module_types.struct4(a=1234, b=0.333, c=25)
u_1_1 = _module_types.union1(i=97)
u_1_2 = _module_types.union1(d=5.6)
u_1_3 = _module_types.union1()
u_2_1 = _module_types.union2(i=51)
u_2_2 = _module_types.union2(d=6.7)
u_2_3 = _module_types.union2(s=_module_types.struct1(a=8, b="abacabb"))
u_2_4 = _module_types.union2(u=_module_types.union1(i=43))
u_2_5 = _module_types.union2(u=_module_types.union1(d=9.8))
u_2_6 = _module_types.union2(u=_module_types.union1())
apostrophe = "'"
tripleApostrophe = "'''"
quotationMark = "\""
backslash = "\\"
escaped_a = "a"
char2ascii = Map__string_i32( { "'": 39, "\"": 34, "\\": 92, "a": 97 })
escaped_strings = List__string(("\001", "\037", " ", "'", "\"", "\n", "\r", "\011", "a", "\302\253", "j", "\302\246", "ayyy", "\302\253yyy", "jyyy", "\302\246yyy", "zzza", "zzz\302\253", "zzzj", "zzz\302\246", "zzzayyy", "zzz\302\253yyy", "zzzjyyy", "zzz\302\246yyy", ))
unicode_list = List__string(("Bulgaria", "Benin", "Saint Barth\303\251lemy", ))
false_c = False
true_c = True
zero_byte = 0
zero16 = 0
zero32 = 0
zero64 = 0
zero_dot_zero = 0
empty_string = ""
empty_int_list = List__i32(())
empty_string_list = List__string(())
empty_int_set = Set__i32(())
empty_string_set = Set__string(())
empty_int_int_map = Map__i32_i32( {  })
empty_int_string_map = Map__i32_string( {  })
empty_string_int_map = Map__string_i32( {  })
empty_string_string_map = Map__string_string( {  })
unicode_map = Map__string_string( { "BG": "Bulgaria", "BH": "Bahrain", "B\303\211": "Saint Barth\303\251lemy" })
maxIntDec = 9223372036854775807
maxIntOct = 9223372036854775807
maxIntHex = 9223372036854775807
maxIntBin = 9223372036854775807
maxDub = 1.7976931348623157e+308
minDub = 2.2250738585072014e-308
minSDub = 5e-324
maxPIntDec = 9223372036854775807
maxPIntOct = 9223372036854775807
maxPIntHex = 9223372036854775807
maxPIntBin = 9223372036854775807
maxPDub = 1.7976931348623157e+308
minPDub = 2.2250738585072014e-308
minPSDub = 5e-324
minIntDec = -9223372036854775808
minIntOct = -9223372036854775808
minIntHex = -9223372036854775808
minIntBin = -9223372036854775808
maxNDub = -1.7976931348623157e+308
minNDub = -2.2250738585072014e-308
minNSDub = -5e-324
I2B = Map__i32_bool( { 0: False, 1: True, 2: True, 3: False })
I2B_REF = Map__i32_bool( { 0: False, 1: True, 2: True, 3: False })
