// Autogenerated by Thrift for included.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package included


import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO

// Premade codec specs
var (
    premadeCodecTypeSpec_i32 = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "i32",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_I32,
},

        }
    }()
    premadeCodecTypeSpec_string = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "string",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
},

        }
    }()
    premadeCodecTypeSpec_map_i32_string = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "map<i32, string>",
            CodecMapSpec: &thrift.CodecMapSpec{
	KeyTypeSpec:   premadeCodecTypeSpec_i32,
	ValueTypeSpec: premadeCodecTypeSpec_string,
    KeyWireType:   thrift.I32,
	ValueWireType: thrift.STRING,
},

        }
    }()
    premadeCodecTypeSpec_included_SomeMap = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "included.SomeMap",
            CodecTypedefSpec: &thrift.CodecTypedefSpec{
    ScopedName:         "included.SomeMap",
	UnderlyingTypeSpec: premadeCodecTypeSpec_map_i32_string,
},

        }
    }()
    premadeCodecTypeSpec_list_included_SomeMap = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "list<included.SomeMap>",
            CodecListSpec: &thrift.CodecListSpec{
    ElementWireType: thrift.MAP,
	ElementTypeSpec: premadeCodecTypeSpec_included_SomeMap,
},

        }
    }()
    premadeCodecTypeSpec_included_SomeListOfTypeMap = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "included.SomeListOfTypeMap",
            CodecTypedefSpec: &thrift.CodecTypedefSpec{
    ScopedName:         "included.SomeListOfTypeMap",
	UnderlyingTypeSpec: premadeCodecTypeSpec_list_included_SomeMap,
},

        }
    }()
)

// Premade struct specs
var (
)

// Premade slice of all struct specs
var premadeStructSpecs = func() []*thrift.StructSpec {
    fbthriftResults := make([]*thrift.StructSpec, 0)
    return fbthriftResults
}()

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_i32.FullName] = premadeCodecTypeSpec_i32
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_included_SomeMap.FullName] = premadeCodecTypeSpec_included_SomeMap
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_included_SomeListOfTypeMap.FullName] = premadeCodecTypeSpec_included_SomeListOfTypeMap
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
