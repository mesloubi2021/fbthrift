// Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module


import (
    shared "shared"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

var _ = shared.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO

// Premade codec specs
var (
    premadeCodecTypeSpec_string = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "string",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
},

        }
    }()
    premadeCodecTypeSpec_module_ShouldBeBoxed = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "module.ShouldBeBoxed",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.ShouldBeBoxed",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewShouldBeBoxed() },
},

        }
    }()
    premadeCodecTypeSpec_module_CustomException = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "module.CustomException",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "module.CustomException",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewCustomException() },
},

        }
    }()
    premadeCodecTypeSpec_void = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "void",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_VOID,
},

        }
    }()
)

// Premade struct specs
var (
    premadeStructSpec_CustomException = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "CustomException",
    ScopedName:           "module.CustomException",
    IsUnion:              false,
    IsException:          true,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "message",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "message": 0,
    },
}
    }()
    premadeStructSpec_ShouldBeBoxed = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "ShouldBeBoxed",
    ScopedName:           "module.ShouldBeBoxed",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "sessionId",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "sessionId": 0,
    },
}
    }()
    premadeStructSpec_reqMyServiceFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "reqMyServiceFoo",
    ScopedName:           "module.reqMyServiceFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_respMyServiceFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "respMyServiceFoo",
    ScopedName:           "module.respMyServiceFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_reqFactoriesFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "reqFactoriesFoo",
    ScopedName:           "module.reqFactoriesFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_respFactoriesFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "respFactoriesFoo",
    ScopedName:           "module.respFactoriesFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_reqPerformFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "reqPerformFoo",
    ScopedName:           "module.reqPerformFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_respPerformFoo = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "respPerformFoo",
    ScopedName:           "module.respPerformFoo",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_reqInteractWithSharedDoSomeSimilarThings = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "reqInteractWithSharedDoSomeSimilarThings",
    ScopedName:           "module.reqInteractWithSharedDoSomeSimilarThings",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_respInteractWithSharedDoSomeSimilarThings = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "respInteractWithSharedDoSomeSimilarThings",
    ScopedName:           "module.respInteractWithSharedDoSomeSimilarThings",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   0,
            WireType:             thrift.STRUCT,
            Name:                 "success",
            ReflectIndex:         0,
            IsOptional:           true,
            ValueTypeSpec:        shared.GetCodecTypeSpec("shared.DoSomethingResult"),
            MustBeSetToSerialize: true,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        0: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "success": 0,
    },
}
    }()
)

// Premade slice of all struct specs
var premadeStructSpecs = func() []*thrift.StructSpec {
    fbthriftResults := make([]*thrift.StructSpec, 0)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_CustomException)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_ShouldBeBoxed)
    return fbthriftResults
}()

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_ShouldBeBoxed.FullName] = premadeCodecTypeSpec_module_ShouldBeBoxed
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_CustomException.FullName] = premadeCodecTypeSpec_module_CustomException
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_void.FullName] = premadeCodecTypeSpec_void
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
