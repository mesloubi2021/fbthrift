/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.interactions;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("InteractWithShared")
public interface InteractWithShared extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared> serverHandlerBuilder(InteractWithShared _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new InteractWithSharedRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<InteractWithShared> clientBuilder() {
        return new ClientBuilder<InteractWithShared>() {
            @java.lang.Override
            public InteractWithShared build(Mono<RpcClient> rpcClientMono) {
                InteractWithShared.Reactive _delegate =
                    new InteractWithSharedReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                return new InteractWithSharedReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("InteractWithShared")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared.Async> serverHandlerBuilder(InteractWithShared.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new InteractWithSharedRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<InteractWithShared.Async> clientBuilder() {
            return new ClientBuilder<InteractWithShared.Async>() {
                @java.lang.Override
                public InteractWithShared.Async build(Mono<RpcClient> rpcClientMono) {
                    InteractWithShared.Reactive _delegate =
                        new InteractWithSharedReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                    return new InteractWithSharedReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "do_some_similar_things")
        ListenableFuture<test.fixtures.another_interactions.DoSomethingResult> doSomeSimilarThings();

        default ListenableFuture<test.fixtures.another_interactions.DoSomethingResult> doSomeSimilarThings(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult>> doSomeSimilarThingsWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
        @com.facebook.swift.service.ThriftInteraction("MyInteraction")
        public interface MyInteraction extends java.io.Closeable {
            @ThriftMethod(value = "frobnicate",
                exception = { 
                    @ThriftException(type=test.fixtures.interactions.CustomException.class, id=1)
                })
            ListenableFuture<Integer> frobnicate();

            ListenableFuture<Integer> frobnicate(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<Integer>> frobnicateWrapper(
                RpcOptions rpcOptions);
            @ThriftMethod(value = "ping",
                oneway = true)
            ListenableFuture<Void> ping();

            ListenableFuture<Void> ping(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<Void>> pingWrapper(
                RpcOptions rpcOptions);

            @java.lang.Override
            void close();
        }

        public MyInteraction createMyInteraction();

        @com.facebook.swift.service.ThriftInteraction("SharedInteraction")
        public interface SharedInteraction extends java.io.Closeable {
            @ThriftMethod(value = "init")
            ListenableFuture<Integer> init();

            ListenableFuture<Integer> init(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<Integer>> initWrapper(
                RpcOptions rpcOptions);
            @ThriftMethod(value = "do_something")
            ListenableFuture<test.fixtures.another_interactions.DoSomethingResult> doSomething();

            ListenableFuture<test.fixtures.another_interactions.DoSomethingResult> doSomething(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult>> doSomethingWrapper(
                RpcOptions rpcOptions);
            @ThriftMethod(value = "tear_down")
            ListenableFuture<Void> tearDown();

            ListenableFuture<Void> tearDown(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<Void>> tearDownWrapper(
                RpcOptions rpcOptions);

            @java.lang.Override
            void close();
        }

        public SharedInteraction createSharedInteraction();
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "do_some_similar_things")
    test.fixtures.another_interactions.DoSomethingResult doSomeSimilarThings() throws org.apache.thrift.TException;

    default test.fixtures.another_interactions.DoSomethingResult doSomeSimilarThings(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult> doSomeSimilarThingsWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("InteractWithShared")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared.Reactive> serverHandlerBuilder(InteractWithShared.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<InteractWithShared.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new InteractWithSharedRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<InteractWithShared.Reactive> clientBuilder() {
            return new ClientBuilder<InteractWithShared.Reactive>() {
                @java.lang.Override
                public InteractWithShared.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new InteractWithSharedReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                }
            };
        }

        @ThriftMethod(value = "do_some_similar_things")
        reactor.core.publisher.Mono<test.fixtures.another_interactions.DoSomethingResult> doSomeSimilarThings();

        default reactor.core.publisher.Mono<test.fixtures.another_interactions.DoSomethingResult> doSomeSimilarThings(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult>> doSomeSimilarThingsWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @com.facebook.swift.service.ThriftInteraction("MyInteraction")
        public interface MyInteraction extends reactor.core.Disposable {
            @ThriftMethod(value = "frobnicate",
                exception = { 
                    @ThriftException(type=test.fixtures.interactions.CustomException.class, id=1)
                })
            reactor.core.publisher.Mono<Integer> frobnicate();

            reactor.core.publisher.Mono<Integer> frobnicate(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<Integer>> frobnicateWrapper(RpcOptions rpcOptions);

            @ThriftMethod(value = "ping",
                oneway = true)
            reactor.core.publisher.Mono<Void> ping();

            reactor.core.publisher.Mono<Void> ping(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<Void>> pingWrapper(RpcOptions rpcOptions);

            reactor.core.publisher.Flux<Boolean> truthify();

            default reactor.core.publisher.Flux<Boolean> truthify(RpcOptions rpcOptions) {
                throw new UnsupportedOperationException();
            }

            default reactor.core.publisher.Flux<ResponseWrapper<Boolean>> truthifyWrapper(RpcOptions rpcOptions) {
                throw new UnsupportedOperationException();
            }

            @java.lang.Override
            void dispose();
        }

        public MyInteraction createMyInteraction();

        @com.facebook.swift.service.ThriftInteraction("SharedInteraction")
        public interface SharedInteraction extends reactor.core.Disposable {
            @ThriftMethod(value = "init")
            reactor.core.publisher.Mono<Integer> init();

            reactor.core.publisher.Mono<Integer> init(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<Integer>> initWrapper(RpcOptions rpcOptions);

            @ThriftMethod(value = "do_something")
            reactor.core.publisher.Mono<test.fixtures.another_interactions.DoSomethingResult> doSomething();

            reactor.core.publisher.Mono<test.fixtures.another_interactions.DoSomethingResult> doSomething(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult>> doSomethingWrapper(RpcOptions rpcOptions);

            @ThriftMethod(value = "tear_down")
            reactor.core.publisher.Mono<Void> tearDown();

            reactor.core.publisher.Mono<Void> tearDown(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<Void>> tearDownWrapper(RpcOptions rpcOptions);

            @java.lang.Override
            void dispose();
        }

        public SharedInteraction createSharedInteraction();
    }
    @com.facebook.swift.service.ThriftInteraction("MyInteraction")
    public interface MyInteraction extends java.io.Closeable {
        @ThriftMethod(value = "frobnicate",
                      exception = { 
                          @ThriftException(type=test.fixtures.interactions.CustomException.class, id=1)
                      })
        int frobnicate() throws test.fixtures.interactions.CustomException, org.apache.thrift.TException;

        int frobnicate(
            RpcOptions rpcOptions) throws test.fixtures.interactions.CustomException, org.apache.thrift.TException;

        ResponseWrapper<Integer> frobnicateWrapper(
            RpcOptions rpcOptions) throws test.fixtures.interactions.CustomException, org.apache.thrift.TException;
        @ThriftMethod(value = "ping",
                      oneway = true)
        void ping() throws org.apache.thrift.TException;

        void ping(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<Void> pingWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        @java.lang.Override void close();
    }

    MyInteraction createMyInteraction();

    @com.facebook.swift.service.ThriftInteraction("SharedInteraction")
    public interface SharedInteraction extends java.io.Closeable {
        @ThriftMethod(value = "init")
        int init() throws org.apache.thrift.TException;

        int init(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<Integer> initWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;
        @ThriftMethod(value = "do_something")
        test.fixtures.another_interactions.DoSomethingResult doSomething() throws org.apache.thrift.TException;

        test.fixtures.another_interactions.DoSomethingResult doSomething(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<test.fixtures.another_interactions.DoSomethingResult> doSomethingWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;
        @ThriftMethod(value = "tear_down")
        void tearDown() throws org.apache.thrift.TException;

        void tearDown(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<Void> tearDownWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        @java.lang.Override void close();
    }

    SharedInteraction createSharedInteraction();
}
