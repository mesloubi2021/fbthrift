/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.interactions;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("BoxService")
public interface BoxService extends java.io.Closeable, com.facebook.thrift.util.BlockingService {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService> serverHandlerBuilder(BoxService _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new BoxServiceRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<BoxService> clientBuilder() {
        return new ClientBuilder<BoxService>() {
            @java.lang.Override
            public BoxService build(Mono<RpcClient> rpcClientMono) {
                BoxService.Reactive _delegate =
                    new BoxServiceReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                return new BoxServiceReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("BoxService")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService.Async> serverHandlerBuilder(BoxService.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new BoxServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<BoxService.Async> clientBuilder() {
            return new ClientBuilder<BoxService.Async>() {
                @java.lang.Override
                public BoxService.Async build(Mono<RpcClient> rpcClientMono) {
                    BoxService.Reactive _delegate =
                        new BoxServiceReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                    return new BoxServiceReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "getABoxSession")
        ListenableFuture<test.fixtures.interactions.ShouldBeBoxed> getABoxSession(
            @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req);

        default ListenableFuture<test.fixtures.interactions.ShouldBeBoxed> getABoxSession(
            @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed>> getABoxSessionWrapper(
            @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
        @com.facebook.swift.service.ThriftInteraction("BoxedInteraction")
        public interface BoxedInteraction extends java.io.Closeable {
            @ThriftMethod(value = "getABox")
            ListenableFuture<test.fixtures.interactions.ShouldBeBoxed> getABox();

            ListenableFuture<test.fixtures.interactions.ShouldBeBoxed> getABox(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed>> getABoxWrapper(
                RpcOptions rpcOptions);

            @java.lang.Override
            void close();
        }

        public BoxedInteraction createBoxedInteraction();
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "getABoxSession")
    test.fixtures.interactions.ShouldBeBoxed getABoxSession(
        @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req) throws org.apache.thrift.TException;

    default test.fixtures.interactions.ShouldBeBoxed getABoxSession(
        @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed> getABoxSessionWrapper(
        @com.facebook.swift.codec.ThriftField(value=1, name="req", requiredness=Requiredness.NONE) final test.fixtures.interactions.ShouldBeBoxed req,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("BoxService")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService.Reactive> serverHandlerBuilder(BoxService.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<BoxService.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new BoxServiceRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<BoxService.Reactive> clientBuilder() {
            return new ClientBuilder<BoxService.Reactive>() {
                @java.lang.Override
                public BoxService.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new BoxServiceReactiveClient(protocolId, rpcClientMono, headersMono, persistentHeadersMono);
                }
            };
        }

        @ThriftMethod(value = "getABoxSession")
        reactor.core.publisher.Mono<test.fixtures.interactions.ShouldBeBoxed> getABoxSession(final test.fixtures.interactions.ShouldBeBoxed req);

        default reactor.core.publisher.Mono<test.fixtures.interactions.ShouldBeBoxed> getABoxSession(final test.fixtures.interactions.ShouldBeBoxed req, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed>> getABoxSessionWrapper(final test.fixtures.interactions.ShouldBeBoxed req, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @com.facebook.swift.service.ThriftInteraction("BoxedInteraction")
        public interface BoxedInteraction extends reactor.core.Disposable {
            @ThriftMethod(value = "getABox")
            reactor.core.publisher.Mono<test.fixtures.interactions.ShouldBeBoxed> getABox();

            reactor.core.publisher.Mono<test.fixtures.interactions.ShouldBeBoxed> getABox(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed>> getABoxWrapper(RpcOptions rpcOptions);

            @java.lang.Override
            void dispose();
        }

        public BoxedInteraction createBoxedInteraction();
    }
    @com.facebook.swift.service.ThriftInteraction("BoxedInteraction")
    public interface BoxedInteraction extends java.io.Closeable {
        @ThriftMethod(value = "getABox")
        test.fixtures.interactions.ShouldBeBoxed getABox() throws org.apache.thrift.TException;

        test.fixtures.interactions.ShouldBeBoxed getABox(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<test.fixtures.interactions.ShouldBeBoxed> getABoxWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        @java.lang.Override void close();
    }

    BoxedInteraction createBoxedInteraction();
}
