// Autogenerated by Thrift for thrift/compiler/test/fixtures/includes/src/matching_names.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package matching_names


import (
    includesAlso "IncludesAlso"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

var _ = includesAlso.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO

// Premade codec specs
var (
    premadeCodecTypeSpec_matching_names_IncludesAlso = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "matching_names.IncludesAlso",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "matching_names.IncludesAlso",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewIncludesAlso() },
},

        }
    }()
)

// Premade struct specs
var (
    premadeStructSpec_IncludesAlso = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "IncludesAlso",
    ScopedName:           "matching_names.IncludesAlso",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRUCT,
            Name:                 "also",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        includesAlso.GetCodecTypeSpec("IncludesAlso.Also"),
            MustBeSetToSerialize: true,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "also": 0,
    },
}
    }()
)

// Premade slice of all struct specs
var premadeStructSpecs = func() []*thrift.StructSpec {
    fbthriftResults := make([]*thrift.StructSpec, 0)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_IncludesAlso)
    return fbthriftResults
}()

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_matching_names_IncludesAlso.FullName] = premadeCodecTypeSpec_matching_names_IncludesAlso
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
