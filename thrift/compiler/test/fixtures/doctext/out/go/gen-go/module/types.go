// Autogenerated by Thrift for thrift/compiler/test/fixtures/doctext/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.ZERO


type Lanyard = string

func NewLanyard() Lanyard {
    return ""
}

func WriteLanyard(item Lanyard, p thrift.Encoder) error {
    if err := p.WriteString(item); err != nil {
        return err
    }
    return nil
}

func ReadLanyard(p thrift.Decoder) (Lanyard, error) {
    var decodeResult Lanyard
    decodeErr := func() error {
        result, err := p.ReadString()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type Number = int32

func NewNumber() Number {
    return 0
}

func WriteNumber(item Number, p thrift.Encoder) error {
    if err := p.WriteI32(item); err != nil {
        return err
    }
    return nil
}

func ReadNumber(p thrift.Decoder) (Number, error) {
    var decodeResult Number
    decodeErr := func() error {
        result, err := p.ReadI32()
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type B int32

const (
    B_HELLO B = 0
)

// Enum value maps for B
var (
    BToName = map[B]string {
        B_HELLO: "HELLO",
    }

    BToValue = map[string]B {
        "HELLO": B_HELLO,
    }
)

func (x B) String() string {
    if v, ok := BToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x B) Ptr() *B {
    return &x
}

// Deprecated: Use BToValue instead (e.g. `x, ok := BToValue["name"]`).
func BFromString(s string) (B, error) {
    if v, ok := BToValue[s]; ok {
        return v, nil
    }
    return B(0), fmt.Errorf("not a valid B string")
}

type A struct {
    UselessField int32 `thrift:"useless_field,1" json:"useless_field" db:"useless_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*A)(nil)

func NewA() *A {
    return (&A{}).setDefaults()
}

func (x *A) GetUselessField() int32 {
    return x.UselessField
}

func (x *A) SetUselessFieldNonCompat(value int32) *A {
    x.UselessField = value
    return x
}

func (x *A) SetUselessField(value int32) *A {
    x.UselessField = value
    return x
}

func (x *A) writeField1(p thrift.Encoder) error {  // UselessField
    if err := p.WriteFieldBegin("useless_field", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UselessField
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *A) readField1(p thrift.Decoder) error {  // UselessField
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.UselessField = result
    return nil
}



func (x *A) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("A"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *A) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "useless_field")):  // useless_field
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *A) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *A) setDefaults() *A {
    return x.
        SetUselessFieldNonCompat(0)
}

type U struct {
    I *int32 `thrift:"i,1" json:"i,omitempty" db:"i"`
    S *string `thrift:"s,2" json:"s,omitempty" db:"s"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*U)(nil)

func NewU() *U {
    return (&U{}).setDefaults()
}

func (x *U) GetI() int32 {
    if !x.IsSetI() {
        return 0
    }
    return *x.I
}

func (x *U) GetS() string {
    if !x.IsSetS() {
        return ""
    }
    return *x.S
}

func (x *U) SetINonCompat(value int32) *U {
    x.I = &value
    return x
}

func (x *U) SetI(value *int32) *U {
    x.I = value
    return x
}

func (x *U) SetSNonCompat(value string) *U {
    x.S = &value
    return x
}

func (x *U) SetS(value *string) *U {
    x.S = value
    return x
}

func (x *U) IsSetI() bool {
    return x != nil && x.I != nil
}

func (x *U) IsSetS() bool {
    return x != nil && x.S != nil
}

func (x *U) writeField1(p thrift.Encoder) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.I
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *U) writeField2(p thrift.Encoder) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.S
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *U) readField1(p thrift.Decoder) error {  // I
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.I = &result
    return nil
}

func (x *U) readField2(p thrift.Decoder) error {  // S
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.S = &result
    return nil
}



func (x *U) countSetFields() int {
    count := int(0)
    if (x.IsSetI()) {
        count++
    }
    if (x.IsSetS()) {
        count++
    }
    return count
}

func (x *U) CountSetFieldsU() int {
    return x.countSetFields()
}



func (x *U) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("U"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *U) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "i")):  // i
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "s")):  // s
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *U) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *U) setDefaults() *U {
    return x
}

type Bang struct {
    Message string `thrift:"message,1" json:"message" db:"message"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Bang)(nil)

func NewBang() *Bang {
    return (&Bang{}).setDefaults()
}

func (x *Bang) GetMessage() string {
    return x.Message
}

func (x *Bang) SetMessageNonCompat(value string) *Bang {
    x.Message = value
    return x
}

func (x *Bang) SetMessage(value string) *Bang {
    x.Message = value
    return x
}

func (x *Bang) writeField1(p thrift.Encoder) error {  // Message
    if err := p.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Message
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bang) readField1(p thrift.Decoder) error {  // Message
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Message = result
    return nil
}



func (x *Bang) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Bang"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bang) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "message")):  // message
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Bang) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Bang) setDefaults() *Bang {
    return x.
        SetMessageNonCompat("")
}

func (x *Bang) Error() string {
    return x.String()
}

// Service req/resp structs (below)
type reqCF struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqCF)(nil)

// Deprecated: CFArgsDeprecated is deprecated, since it is supposed to be internal.
type CFArgsDeprecated = reqCF

func newReqCF() *reqCF {
    return (&reqCF{}).setDefaults()
}



func (x *reqCF) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqCF"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqCF) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqCF) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqCF) setDefaults() *reqCF {
    return x
}

type respCF struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respCF)(nil)
var _ thrift.WritableResult = (*respCF)(nil)

// Deprecated: CFResultDeprecated is deprecated, since it is supposed to be internal.
type CFResultDeprecated = respCF

func newRespCF() *respCF {
    return (&respCF{}).setDefaults()
}



func (x *respCF) Exception() thrift.WritableException {
    return nil
}

func (x *respCF) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respCF"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respCF) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respCF) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respCF) setDefaults() *respCF {
    return x
}

type reqCThing struct {
    A int32 `thrift:"a,1" json:"a" db:"a"`
    B string `thrift:"b,2" json:"b" db:"b"`
    C []int32 `thrift:"c,3" json:"c" db:"c"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqCThing)(nil)

// Deprecated: CThingArgsDeprecated is deprecated, since it is supposed to be internal.
type CThingArgsDeprecated = reqCThing

func newReqCThing() *reqCThing {
    return (&reqCThing{}).setDefaults()
}

func (x *reqCThing) GetA() int32 {
    return x.A
}

func (x *reqCThing) GetB() string {
    return x.B
}

func (x *reqCThing) GetC() []int32 {
    if !x.IsSetC() {
        return make([]int32, 0)
    }
    return x.C
}

func (x *reqCThing) SetANonCompat(value int32) *reqCThing {
    x.A = value
    return x
}

func (x *reqCThing) SetA(value int32) *reqCThing {
    x.A = value
    return x
}

func (x *reqCThing) SetBNonCompat(value string) *reqCThing {
    x.B = value
    return x
}

func (x *reqCThing) SetB(value string) *reqCThing {
    x.B = value
    return x
}

func (x *reqCThing) SetCNonCompat(value []int32) *reqCThing {
    x.C = value
    return x
}

func (x *reqCThing) SetC(value []int32) *reqCThing {
    x.C = value
    return x
}

func (x *reqCThing) IsSetC() bool {
    return x != nil && x.C != nil
}

func (x *reqCThing) writeField1(p thrift.Encoder) error {  // A
    if err := p.WriteFieldBegin("a", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.A
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqCThing) writeField2(p thrift.Encoder) error {  // B
    if err := p.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.B
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqCThing) writeField3(p thrift.Encoder) error {  // C
    if err := p.WriteFieldBegin("c", thrift.SET, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.C
    if err := p.WriteSetBegin(thrift.I32, len(item)); err != nil {
        return thrift.PrependError("error writing set begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteI32(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteSetEnd(); err != nil {
        return thrift.PrependError("error writing set end: ", err)
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqCThing) readField1(p thrift.Decoder) error {  // A
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.A = result
    return nil
}

func (x *reqCThing) readField2(p thrift.Decoder) error {  // B
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.B = result
    return nil
}

func (x *reqCThing) readField3(p thrift.Decoder) error {  // C
    _ /* elemType */, size, err := p.ReadSetBegin()
    if err != nil {
        return thrift.PrependError("error reading set begin: ", err)
    }
    
    setResult := make([]int32, 0, size)
    for i := 0; i < size; i++ {
        var elem int32
        {
            result, err := p.ReadI32()
            if err != nil {
                return err
            }
            elem = result
        }
        setResult = append(setResult, elem)
    }
    
    if err := p.ReadSetEnd(); err != nil {
        return thrift.PrependError("error reading set end: ", err)
    }
    result := setResult

    x.C = result
    return nil
}



func (x *reqCThing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqCThing"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqCThing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "a")):  // a
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "b")):  // b
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.SET) || (id == thrift.NO_FIELD_ID && fieldName == "c")):  // c
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqCThing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqCThing) setDefaults() *reqCThing {
    return x.
        SetANonCompat(0).
        SetBNonCompat("").
        SetCNonCompat(make([]int32, 0))
}

type respCThing struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
    Bang *Bang `thrift:"bang,1,optional" json:"bang,omitempty" db:"bang"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respCThing)(nil)
var _ thrift.WritableResult = (*respCThing)(nil)

// Deprecated: CThingResultDeprecated is deprecated, since it is supposed to be internal.
type CThingResultDeprecated = respCThing

func newRespCThing() *respCThing {
    return (&respCThing{}).setDefaults()
}

func (x *respCThing) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respCThing) GetBang() *Bang {
    if !x.IsSetBang() {
        return nil
    }
    return x.Bang
}

func (x *respCThing) SetSuccessNonCompat(value string) *respCThing {
    x.Success = &value
    return x
}

func (x *respCThing) SetSuccess(value *string) *respCThing {
    x.Success = value
    return x
}

func (x *respCThing) SetBangNonCompat(value *Bang) *respCThing {
    x.Bang = value
    return x
}

func (x *respCThing) SetBang(value *Bang) *respCThing {
    x.Bang = value
    return x
}

func (x *respCThing) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respCThing) IsSetBang() bool {
    return x != nil && x.Bang != nil
}

func (x *respCThing) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respCThing) writeField1(p thrift.Encoder) error {  // Bang
    if !x.IsSetBang() {
        return nil
    }

    if err := p.WriteFieldBegin("bang", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Bang
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respCThing) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}

func (x *respCThing) readField1(p thrift.Decoder) error {  // Bang
    result := NewBang()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.Bang = result
    return nil
}


// Deprecated: Use newRespCThing().GetBang() instead.
func (x *respCThing) DefaultGetBang() *Bang {
    if !x.IsSetBang() {
        return NewBang()
    }
    return x.Bang
}



func (x *respCThing) Exception() thrift.WritableException {
    if x.Bang != nil {
        return x.Bang
    }
    return nil
}

func (x *respCThing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respCThing"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }
    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respCThing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d ('%s') read error: ", x, id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "bang")):  // bang
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respCThing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respCThing) setDefaults() *respCThing {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
