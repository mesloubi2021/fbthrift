#
# Autogenerated by Thrift for includes.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import enum as _python_std_enum
import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.python.types
import thrift.py3.exceptions
import typing as _typing

import sys
import itertools


class AnEnum(thrift.python.types.Enum):
    FIELDA: AnEnum = ...
    FIELDB: AnEnum = ...
    def _to_python(self) -> "includes.thrift_types.AnEnum": ...   # type: ignore
    def _to_py3(self) -> AnEnum: ...
    def _to_py_deprecated(self) -> int: ...
    def __int__(self) -> int: ...
    def __index__(self) -> int: ...


class AStruct(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        FieldA: bool
        pass

    FieldA: _typing.Final[int] = ...

    def __init__(
        self, *,
        FieldA: _typing.Optional[int]=None
    ) -> None: ...

    def __call__(
        self, *,
        FieldA: _typing.Union[int, None]=None
    ) -> AStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['AStruct'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'AStruct') -> bool: ...
    def __gt__(self, other: 'AStruct') -> bool: ...
    def __le__(self, other: 'AStruct') -> bool: ...
    def __ge__(self, other: 'AStruct') -> bool: ...

    def _to_python(self) -> "includes.thrift_types.AStruct": ...   # type: ignore
    def _to_py3(self) -> AStruct: ...
    def _to_py_deprecated(self) -> "includes.ttypes.AStruct": ...   # type: ignore

class AStructB(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        pass

    FieldA: _typing.Final[_typing.Optional[AStruct]] = ...

    def __init__(
        self, *,
        FieldA: _typing.Optional[AStruct]=None
    ) -> None: ...

    def __call__(
        self, *,
        FieldA: _typing.Union[AStruct, None]=None
    ) -> AStructB: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['AStructB'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'AStructB') -> bool: ...
    def __gt__(self, other: 'AStructB') -> bool: ...
    def __le__(self, other: 'AStructB') -> bool: ...
    def __ge__(self, other: 'AStructB') -> bool: ...

    def _to_python(self) -> "includes.thrift_types.AStructB": ...   # type: ignore
    def _to_py3(self) -> AStructB: ...
    def _to_py_deprecated(self) -> "includes.ttypes.AStructB": ...   # type: ignore

IncludedConstant: int = ...
IncludedInt64 = int
