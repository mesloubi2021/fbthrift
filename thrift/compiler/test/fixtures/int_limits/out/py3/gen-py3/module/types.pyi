#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/int_limits/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import enum as _python_std_enum
import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.python.types
import thrift.py3.exceptions
import typing as _typing

import sys
import itertools


class Limits(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        max_i64_field: bool
        min_i64_field: bool
        max_i32_field: bool
        min_i32_field: bool
        max_i16_field: bool
        min_i16_field: bool
        max_byte_field: bool
        min_byte_field: bool
        pass

    max_i64_field: _typing.Final[int] = ...
    min_i64_field: _typing.Final[int] = ...
    max_i32_field: _typing.Final[int] = ...
    min_i32_field: _typing.Final[int] = ...
    max_i16_field: _typing.Final[int] = ...
    min_i16_field: _typing.Final[int] = ...
    max_byte_field: _typing.Final[int] = ...
    min_byte_field: _typing.Final[int] = ...

    def __init__(
        self, *,
        max_i64_field: _typing.Optional[int]=None,
        min_i64_field: _typing.Optional[int]=None,
        max_i32_field: _typing.Optional[int]=None,
        min_i32_field: _typing.Optional[int]=None,
        max_i16_field: _typing.Optional[int]=None,
        min_i16_field: _typing.Optional[int]=None,
        max_byte_field: _typing.Optional[int]=None,
        min_byte_field: _typing.Optional[int]=None
    ) -> None: ...

    def __call__(
        self, *,
        max_i64_field: _typing.Union[int, None]=None,
        min_i64_field: _typing.Union[int, None]=None,
        max_i32_field: _typing.Union[int, None]=None,
        min_i32_field: _typing.Union[int, None]=None,
        max_i16_field: _typing.Union[int, None]=None,
        min_i16_field: _typing.Union[int, None]=None,
        max_byte_field: _typing.Union[int, None]=None,
        min_byte_field: _typing.Union[int, None]=None
    ) -> Limits: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Limits'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'Limits') -> bool: ...
    def __gt__(self, other: 'Limits') -> bool: ...
    def __le__(self, other: 'Limits') -> bool: ...
    def __ge__(self, other: 'Limits') -> bool: ...

    def _to_python(self) -> "module.thrift_types.Limits": ...   # type: ignore
    def _to_py3(self) -> Limits: ...
    def _to_py_deprecated(self) -> "module.ttypes.Limits": ...   # type: ignore

max_i64_const: int = ...
min_i64_const: int = ...
max_i32_const: int = ...
min_i32_const: int = ...
max_i16_const: int = ...
min_i16_const: int = ...
max_byte_const: int = ...
min_byte_const: int = ...
