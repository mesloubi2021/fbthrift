/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Containers implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Containers");
  private static final TField STRUCT_LIST_FIELD_DESC = new TField("struct_list", TType.LIST, (short)1);
  private static final TField UNION_LIST_FIELD_DESC = new TField("union_list", TType.LIST, (short)2);
  private static final TField ENUM_LIST_FIELD_DESC = new TField("enum_list", TType.LIST, (short)3);
  private static final TField STRUCT_SET_FIELD_DESC = new TField("struct_set", TType.SET, (short)4);
  private static final TField UNION_SET_FIELD_DESC = new TField("union_set", TType.SET, (short)5);
  private static final TField ENUM_SET_FIELD_DESC = new TField("enum_set", TType.SET, (short)6);
  private static final TField STRUCT_MAP_FIELD_DESC = new TField("struct_map", TType.MAP, (short)7);
  private static final TField UNION_MAP_FIELD_DESC = new TField("union_map", TType.MAP, (short)8);
  private static final TField ENUM_MAP_FIELD_DESC = new TField("enum_map", TType.MAP, (short)9);
  private static final TField STRUCT_MAP_2_FIELD_DESC = new TField("struct_map_2", TType.MAP, (short)10);
  private static final TField UNION_MAP_2_FIELD_DESC = new TField("union_map_2", TType.MAP, (short)11);
  private static final TField ENUM_MAP_2_FIELD_DESC = new TField("enum_map_2", TType.MAP, (short)12);
  private static final TField LIST_MAP_FIELD_DESC = new TField("list_map", TType.MAP, (short)13);
  private static final TField LIST_MAP_2_FIELD_DESC = new TField("list_map_2", TType.MAP, (short)14);
  private static final TField SET_MAP_FIELD_DESC = new TField("set_map", TType.MAP, (short)15);
  private static final TField SET_MAP_2_FIELD_DESC = new TField("set_map_2", TType.MAP, (short)16);
  private static final TField MAP_MAP_FIELD_DESC = new TField("map_map", TType.MAP, (short)17);
  private static final TField MAP_MAP_2_FIELD_DESC = new TField("map_map_2", TType.MAP, (short)18);
  private static final TField LIST_LIST_I32_FIELD_DESC = new TField("list_list_i32", TType.LIST, (short)19);
  private static final TField LIST_LIST_STRUCT_FIELD_DESC = new TField("list_list_struct", TType.LIST, (short)20);
  private static final TField LIST_SET_I32_FIELD_DESC = new TField("list_set_i32", TType.LIST, (short)21);
  private static final TField LIST_SET_STRUCT_FIELD_DESC = new TField("list_set_struct", TType.LIST, (short)22);
  private static final TField LIST_MAP_I32_I32_FIELD_DESC = new TField("list_map_i32_i32", TType.LIST, (short)23);
  private static final TField LIST_MAP_I32_STRUCT_FIELD_DESC = new TField("list_map_i32_struct", TType.LIST, (short)24);
  private static final TField LIST_MAP_STRUCT_I32_FIELD_DESC = new TField("list_map_struct_i32", TType.LIST, (short)25);
  private static final TField SET_LIST_I32_FIELD_DESC = new TField("set_list_i32", TType.SET, (short)26);
  private static final TField SET_LIST_STRUCT_FIELD_DESC = new TField("set_list_struct", TType.SET, (short)27);
  private static final TField SET_SET_I32_FIELD_DESC = new TField("set_set_i32", TType.SET, (short)28);
  private static final TField SET_SET_STRUCT_FIELD_DESC = new TField("set_set_struct", TType.SET, (short)29);
  private static final TField SET_MAP_I32_I32_FIELD_DESC = new TField("set_map_i32_i32", TType.SET, (short)30);
  private static final TField SET_MAP_I32_STRUCT_FIELD_DESC = new TField("set_map_i32_struct", TType.SET, (short)31);
  private static final TField SET_MAP_STRUCT_I32_FIELD_DESC = new TField("set_map_struct_i32", TType.SET, (short)32);
  private static final TField MAP_I32_MAP_I32_I32_FIELD_DESC = new TField("map_i32_map_i32_i32", TType.MAP, (short)33);
  private static final TField MAP_I32_MAP_STRUCT_I32_FIELD_DESC = new TField("map_i32_map_struct_i32", TType.MAP, (short)34);
  private static final TField MAP_I32_MAP_I32_STRUCT_FIELD_DESC = new TField("map_i32_map_i32_struct", TType.MAP, (short)35);
  private static final TField MAP_I32_MAP_LIST_I32_I32_FIELD_DESC = new TField("map_i32_map_list_i32_i32", TType.MAP, (short)36);
  private static final TField MAP_I32_MAP_LIST_STRUCT_I32_FIELD_DESC = new TField("map_i32_map_list_struct_i32", TType.MAP, (short)37);

  public List<MyStruct> struct_list;
  public List<MyUnion> union_list;
  public List<MyEnum> enum_list;
  public Set<MyStruct> struct_set;
  public Set<MyUnion> union_set;
  public Set<MyEnum> enum_set;
  public Map<MyStruct,Long> struct_map;
  public Map<MyUnion,Long> union_map;
  public Map<MyEnum,Long> enum_map;
  public Map<Integer,MyStruct> struct_map_2;
  public Map<Integer,MyUnion> union_map_2;
  public Map<Integer,MyEnum> enum_map_2;
  public Map<List<Integer>,Integer> list_map;
  public Map<Integer,List<Integer>> list_map_2;
  public Map<Set<Integer>,Integer> set_map;
  public Map<Integer,Set<Integer>> set_map_2;
  public Map<Map<Integer,Integer>,Integer> map_map;
  public Map<Integer,Map<Integer,Integer>> map_map_2;
  public List<List<Integer>> list_list_i32;
  public List<List<MyStruct>> list_list_struct;
  public List<Set<Integer>> list_set_i32;
  public List<Set<MyStruct>> list_set_struct;
  public List<Map<Integer,Integer>> list_map_i32_i32;
  public List<Map<Integer,MyStruct>> list_map_i32_struct;
  public List<Map<MyStruct,Integer>> list_map_struct_i32;
  public Set<List<Integer>> set_list_i32;
  public Set<List<MyStruct>> set_list_struct;
  public Set<Set<Integer>> set_set_i32;
  public Set<Set<MyStruct>> set_set_struct;
  public Set<Map<Integer,Integer>> set_map_i32_i32;
  public Set<Map<Integer,MyStruct>> set_map_i32_struct;
  public Set<Map<MyStruct,Integer>> set_map_struct_i32;
  public Map<Integer,Map<Integer,Integer>> map_i32_map_i32_i32;
  public Map<Integer,Map<MyStruct,Integer>> map_i32_map_struct_i32;
  public Map<Integer,Map<Integer,MyStruct>> map_i32_map_i32_struct;
  public Map<Integer,List<Map<Integer,Integer>>> map_i32_map_list_i32_i32;
  public Map<Integer,List<Map<MyStruct,Integer>>> map_i32_map_list_struct_i32;
  public static final int STRUCT_LIST = 1;
  public static final int UNION_LIST = 2;
  public static final int ENUM_LIST = 3;
  public static final int STRUCT_SET = 4;
  public static final int UNION_SET = 5;
  public static final int ENUM_SET = 6;
  public static final int STRUCT_MAP = 7;
  public static final int UNION_MAP = 8;
  public static final int ENUM_MAP = 9;
  public static final int STRUCT_MAP_2 = 10;
  public static final int UNION_MAP_2 = 11;
  public static final int ENUM_MAP_2 = 12;
  public static final int LIST_MAP = 13;
  public static final int LIST_MAP_2 = 14;
  public static final int SET_MAP = 15;
  public static final int SET_MAP_2 = 16;
  public static final int MAP_MAP = 17;
  public static final int MAP_MAP_2 = 18;
  public static final int LIST_LIST_I32 = 19;
  public static final int LIST_LIST_STRUCT = 20;
  public static final int LIST_SET_I32 = 21;
  public static final int LIST_SET_STRUCT = 22;
  public static final int LIST_MAP_I32_I32 = 23;
  public static final int LIST_MAP_I32_STRUCT = 24;
  public static final int LIST_MAP_STRUCT_I32 = 25;
  public static final int SET_LIST_I32 = 26;
  public static final int SET_LIST_STRUCT = 27;
  public static final int SET_SET_I32 = 28;
  public static final int SET_SET_STRUCT = 29;
  public static final int SET_MAP_I32_I32 = 30;
  public static final int SET_MAP_I32_STRUCT = 31;
  public static final int SET_MAP_STRUCT_I32 = 32;
  public static final int MAP_I32_MAP_I32_I32 = 33;
  public static final int MAP_I32_MAP_STRUCT_I32 = 34;
  public static final int MAP_I32_MAP_I32_STRUCT = 35;
  public static final int MAP_I32_MAP_LIST_I32_I32 = 36;
  public static final int MAP_I32_MAP_LIST_STRUCT_I32 = 37;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(STRUCT_LIST, new FieldMetaData("struct_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_LIST, new FieldMetaData("union_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_LIST, new FieldMetaData("enum_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(STRUCT_SET, new FieldMetaData("struct_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_SET, new FieldMetaData("union_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_SET, new FieldMetaData("enum_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(STRUCT_MAP, new FieldMetaData("struct_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyStruct.class), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(UNION_MAP, new FieldMetaData("union_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new StructMetaData(TType.STRUCT, MyUnion.class), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(ENUM_MAP, new FieldMetaData("enum_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(STRUCT_MAP_2, new FieldMetaData("struct_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, MyStruct.class))));
    tmpMetaDataMap.put(UNION_MAP_2, new FieldMetaData("union_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, MyUnion.class))));
    tmpMetaDataMap.put(ENUM_MAP_2, new FieldMetaData("enum_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LIST_MAP, new FieldMetaData("list_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(LIST_MAP_2, new FieldMetaData("list_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_MAP, new FieldMetaData("set_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(SET_MAP_2, new FieldMetaData("set_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(MAP_MAP, new FieldMetaData("map_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(MAP_MAP_2, new FieldMetaData("map_map_2", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LIST_LIST_I32, new FieldMetaData("list_list_i32", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LIST_LIST_STRUCT, new FieldMetaData("list_list_struct", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(LIST_SET_I32, new FieldMetaData("list_set_i32", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LIST_SET_STRUCT, new FieldMetaData("list_set_struct", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new SetMetaData(TType.SET, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(LIST_MAP_I32_I32, new FieldMetaData("list_map_i32_i32", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(LIST_MAP_I32_STRUCT, new FieldMetaData("list_map_i32_struct", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(LIST_MAP_STRUCT_I32, new FieldMetaData("list_map_struct_i32", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new StructMetaData(TType.STRUCT, MyStruct.class), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_LIST_I32, new FieldMetaData("set_list_i32", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_LIST_STRUCT, new FieldMetaData("set_list_struct", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(SET_SET_I32, new FieldMetaData("set_set_i32", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_SET_STRUCT, new FieldMetaData("set_set_struct", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new SetMetaData(TType.SET, 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(SET_MAP_I32_I32, new FieldMetaData("set_map_i32_i32", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(SET_MAP_I32_STRUCT, new FieldMetaData("set_map_i32_struct", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(SET_MAP_STRUCT_I32, new FieldMetaData("set_map_struct_i32", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new MapMetaData(TType.MAP, 
                new StructMetaData(TType.STRUCT, MyStruct.class), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(MAP_I32_MAP_I32_I32, new FieldMetaData("map_i32_map_i32_i32", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(MAP_I32_MAP_STRUCT_I32, new FieldMetaData("map_i32_map_struct_i32", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new MapMetaData(TType.MAP, 
                new StructMetaData(TType.STRUCT, MyStruct.class), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(MAP_I32_MAP_I32_STRUCT, new FieldMetaData("map_i32_map_i32_struct", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.I32), 
                new StructMetaData(TType.STRUCT, MyStruct.class)))));
    tmpMetaDataMap.put(MAP_I32_MAP_LIST_I32_I32, new FieldMetaData("map_i32_map_list_i32_i32", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new MapMetaData(TType.MAP, 
                    new FieldValueMetaData(TType.I32), 
                    new FieldValueMetaData(TType.I32))))));
    tmpMetaDataMap.put(MAP_I32_MAP_LIST_STRUCT_I32, new FieldMetaData("map_i32_map_list_struct_i32", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new ListMetaData(TType.LIST, 
                new MapMetaData(TType.MAP, 
                    new StructMetaData(TType.STRUCT, MyStruct.class), 
                    new FieldValueMetaData(TType.I32))))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Containers.class, metaDataMap);
  }

  public Containers() {
  }

  public Containers(
      List<MyStruct> struct_list,
      List<MyUnion> union_list,
      List<MyEnum> enum_list,
      Set<MyStruct> struct_set,
      Set<MyUnion> union_set,
      Set<MyEnum> enum_set,
      Map<MyStruct,Long> struct_map,
      Map<MyUnion,Long> union_map,
      Map<MyEnum,Long> enum_map,
      Map<Integer,MyStruct> struct_map_2,
      Map<Integer,MyUnion> union_map_2,
      Map<Integer,MyEnum> enum_map_2,
      Map<List<Integer>,Integer> list_map,
      Map<Integer,List<Integer>> list_map_2,
      Map<Set<Integer>,Integer> set_map,
      Map<Integer,Set<Integer>> set_map_2,
      Map<Map<Integer,Integer>,Integer> map_map,
      Map<Integer,Map<Integer,Integer>> map_map_2,
      List<List<Integer>> list_list_i32,
      List<List<MyStruct>> list_list_struct,
      List<Set<Integer>> list_set_i32,
      List<Set<MyStruct>> list_set_struct,
      List<Map<Integer,Integer>> list_map_i32_i32,
      List<Map<Integer,MyStruct>> list_map_i32_struct,
      List<Map<MyStruct,Integer>> list_map_struct_i32,
      Set<List<Integer>> set_list_i32,
      Set<List<MyStruct>> set_list_struct,
      Set<Set<Integer>> set_set_i32,
      Set<Set<MyStruct>> set_set_struct,
      Set<Map<Integer,Integer>> set_map_i32_i32,
      Set<Map<Integer,MyStruct>> set_map_i32_struct,
      Set<Map<MyStruct,Integer>> set_map_struct_i32,
      Map<Integer,Map<Integer,Integer>> map_i32_map_i32_i32,
      Map<Integer,Map<MyStruct,Integer>> map_i32_map_struct_i32,
      Map<Integer,Map<Integer,MyStruct>> map_i32_map_i32_struct,
      Map<Integer,List<Map<Integer,Integer>>> map_i32_map_list_i32_i32,
      Map<Integer,List<Map<MyStruct,Integer>>> map_i32_map_list_struct_i32) {
    this();
    this.struct_list = struct_list;
    this.union_list = union_list;
    this.enum_list = enum_list;
    this.struct_set = struct_set;
    this.union_set = union_set;
    this.enum_set = enum_set;
    this.struct_map = struct_map;
    this.union_map = union_map;
    this.enum_map = enum_map;
    this.struct_map_2 = struct_map_2;
    this.union_map_2 = union_map_2;
    this.enum_map_2 = enum_map_2;
    this.list_map = list_map;
    this.list_map_2 = list_map_2;
    this.set_map = set_map;
    this.set_map_2 = set_map_2;
    this.map_map = map_map;
    this.map_map_2 = map_map_2;
    this.list_list_i32 = list_list_i32;
    this.list_list_struct = list_list_struct;
    this.list_set_i32 = list_set_i32;
    this.list_set_struct = list_set_struct;
    this.list_map_i32_i32 = list_map_i32_i32;
    this.list_map_i32_struct = list_map_i32_struct;
    this.list_map_struct_i32 = list_map_struct_i32;
    this.set_list_i32 = set_list_i32;
    this.set_list_struct = set_list_struct;
    this.set_set_i32 = set_set_i32;
    this.set_set_struct = set_set_struct;
    this.set_map_i32_i32 = set_map_i32_i32;
    this.set_map_i32_struct = set_map_i32_struct;
    this.set_map_struct_i32 = set_map_struct_i32;
    this.map_i32_map_i32_i32 = map_i32_map_i32_i32;
    this.map_i32_map_struct_i32 = map_i32_map_struct_i32;
    this.map_i32_map_i32_struct = map_i32_map_i32_struct;
    this.map_i32_map_list_i32_i32 = map_i32_map_list_i32_i32;
    this.map_i32_map_list_struct_i32 = map_i32_map_list_struct_i32;
  }

  public static class Builder {
    private List<MyStruct> struct_list;
    private List<MyUnion> union_list;
    private List<MyEnum> enum_list;
    private Set<MyStruct> struct_set;
    private Set<MyUnion> union_set;
    private Set<MyEnum> enum_set;
    private Map<MyStruct,Long> struct_map;
    private Map<MyUnion,Long> union_map;
    private Map<MyEnum,Long> enum_map;
    private Map<Integer,MyStruct> struct_map_2;
    private Map<Integer,MyUnion> union_map_2;
    private Map<Integer,MyEnum> enum_map_2;
    private Map<List<Integer>,Integer> list_map;
    private Map<Integer,List<Integer>> list_map_2;
    private Map<Set<Integer>,Integer> set_map;
    private Map<Integer,Set<Integer>> set_map_2;
    private Map<Map<Integer,Integer>,Integer> map_map;
    private Map<Integer,Map<Integer,Integer>> map_map_2;
    private List<List<Integer>> list_list_i32;
    private List<List<MyStruct>> list_list_struct;
    private List<Set<Integer>> list_set_i32;
    private List<Set<MyStruct>> list_set_struct;
    private List<Map<Integer,Integer>> list_map_i32_i32;
    private List<Map<Integer,MyStruct>> list_map_i32_struct;
    private List<Map<MyStruct,Integer>> list_map_struct_i32;
    private Set<List<Integer>> set_list_i32;
    private Set<List<MyStruct>> set_list_struct;
    private Set<Set<Integer>> set_set_i32;
    private Set<Set<MyStruct>> set_set_struct;
    private Set<Map<Integer,Integer>> set_map_i32_i32;
    private Set<Map<Integer,MyStruct>> set_map_i32_struct;
    private Set<Map<MyStruct,Integer>> set_map_struct_i32;
    private Map<Integer,Map<Integer,Integer>> map_i32_map_i32_i32;
    private Map<Integer,Map<MyStruct,Integer>> map_i32_map_struct_i32;
    private Map<Integer,Map<Integer,MyStruct>> map_i32_map_i32_struct;
    private Map<Integer,List<Map<Integer,Integer>>> map_i32_map_list_i32_i32;
    private Map<Integer,List<Map<MyStruct,Integer>>> map_i32_map_list_struct_i32;

    public Builder() {
    }

    public Builder setStruct_list(final List<MyStruct> struct_list) {
      this.struct_list = struct_list;
      return this;
    }

    public Builder setUnion_list(final List<MyUnion> union_list) {
      this.union_list = union_list;
      return this;
    }

    public Builder setEnum_list(final List<MyEnum> enum_list) {
      this.enum_list = enum_list;
      return this;
    }

    public Builder setStruct_set(final Set<MyStruct> struct_set) {
      this.struct_set = struct_set;
      return this;
    }

    public Builder setUnion_set(final Set<MyUnion> union_set) {
      this.union_set = union_set;
      return this;
    }

    public Builder setEnum_set(final Set<MyEnum> enum_set) {
      this.enum_set = enum_set;
      return this;
    }

    public Builder setStruct_map(final Map<MyStruct,Long> struct_map) {
      this.struct_map = struct_map;
      return this;
    }

    public Builder setUnion_map(final Map<MyUnion,Long> union_map) {
      this.union_map = union_map;
      return this;
    }

    public Builder setEnum_map(final Map<MyEnum,Long> enum_map) {
      this.enum_map = enum_map;
      return this;
    }

    public Builder setStruct_map_2(final Map<Integer,MyStruct> struct_map_2) {
      this.struct_map_2 = struct_map_2;
      return this;
    }

    public Builder setUnion_map_2(final Map<Integer,MyUnion> union_map_2) {
      this.union_map_2 = union_map_2;
      return this;
    }

    public Builder setEnum_map_2(final Map<Integer,MyEnum> enum_map_2) {
      this.enum_map_2 = enum_map_2;
      return this;
    }

    public Builder setList_map(final Map<List<Integer>,Integer> list_map) {
      this.list_map = list_map;
      return this;
    }

    public Builder setList_map_2(final Map<Integer,List<Integer>> list_map_2) {
      this.list_map_2 = list_map_2;
      return this;
    }

    public Builder setSet_map(final Map<Set<Integer>,Integer> set_map) {
      this.set_map = set_map;
      return this;
    }

    public Builder setSet_map_2(final Map<Integer,Set<Integer>> set_map_2) {
      this.set_map_2 = set_map_2;
      return this;
    }

    public Builder setMap_map(final Map<Map<Integer,Integer>,Integer> map_map) {
      this.map_map = map_map;
      return this;
    }

    public Builder setMap_map_2(final Map<Integer,Map<Integer,Integer>> map_map_2) {
      this.map_map_2 = map_map_2;
      return this;
    }

    public Builder setList_list_i32(final List<List<Integer>> list_list_i32) {
      this.list_list_i32 = list_list_i32;
      return this;
    }

    public Builder setList_list_struct(final List<List<MyStruct>> list_list_struct) {
      this.list_list_struct = list_list_struct;
      return this;
    }

    public Builder setList_set_i32(final List<Set<Integer>> list_set_i32) {
      this.list_set_i32 = list_set_i32;
      return this;
    }

    public Builder setList_set_struct(final List<Set<MyStruct>> list_set_struct) {
      this.list_set_struct = list_set_struct;
      return this;
    }

    public Builder setList_map_i32_i32(final List<Map<Integer,Integer>> list_map_i32_i32) {
      this.list_map_i32_i32 = list_map_i32_i32;
      return this;
    }

    public Builder setList_map_i32_struct(final List<Map<Integer,MyStruct>> list_map_i32_struct) {
      this.list_map_i32_struct = list_map_i32_struct;
      return this;
    }

    public Builder setList_map_struct_i32(final List<Map<MyStruct,Integer>> list_map_struct_i32) {
      this.list_map_struct_i32 = list_map_struct_i32;
      return this;
    }

    public Builder setSet_list_i32(final Set<List<Integer>> set_list_i32) {
      this.set_list_i32 = set_list_i32;
      return this;
    }

    public Builder setSet_list_struct(final Set<List<MyStruct>> set_list_struct) {
      this.set_list_struct = set_list_struct;
      return this;
    }

    public Builder setSet_set_i32(final Set<Set<Integer>> set_set_i32) {
      this.set_set_i32 = set_set_i32;
      return this;
    }

    public Builder setSet_set_struct(final Set<Set<MyStruct>> set_set_struct) {
      this.set_set_struct = set_set_struct;
      return this;
    }

    public Builder setSet_map_i32_i32(final Set<Map<Integer,Integer>> set_map_i32_i32) {
      this.set_map_i32_i32 = set_map_i32_i32;
      return this;
    }

    public Builder setSet_map_i32_struct(final Set<Map<Integer,MyStruct>> set_map_i32_struct) {
      this.set_map_i32_struct = set_map_i32_struct;
      return this;
    }

    public Builder setSet_map_struct_i32(final Set<Map<MyStruct,Integer>> set_map_struct_i32) {
      this.set_map_struct_i32 = set_map_struct_i32;
      return this;
    }

    public Builder setMap_i32_map_i32_i32(final Map<Integer,Map<Integer,Integer>> map_i32_map_i32_i32) {
      this.map_i32_map_i32_i32 = map_i32_map_i32_i32;
      return this;
    }

    public Builder setMap_i32_map_struct_i32(final Map<Integer,Map<MyStruct,Integer>> map_i32_map_struct_i32) {
      this.map_i32_map_struct_i32 = map_i32_map_struct_i32;
      return this;
    }

    public Builder setMap_i32_map_i32_struct(final Map<Integer,Map<Integer,MyStruct>> map_i32_map_i32_struct) {
      this.map_i32_map_i32_struct = map_i32_map_i32_struct;
      return this;
    }

    public Builder setMap_i32_map_list_i32_i32(final Map<Integer,List<Map<Integer,Integer>>> map_i32_map_list_i32_i32) {
      this.map_i32_map_list_i32_i32 = map_i32_map_list_i32_i32;
      return this;
    }

    public Builder setMap_i32_map_list_struct_i32(final Map<Integer,List<Map<MyStruct,Integer>>> map_i32_map_list_struct_i32) {
      this.map_i32_map_list_struct_i32 = map_i32_map_list_struct_i32;
      return this;
    }

    public Containers build() {
      Containers result = new Containers();
      result.setStruct_list(this.struct_list);
      result.setUnion_list(this.union_list);
      result.setEnum_list(this.enum_list);
      result.setStruct_set(this.struct_set);
      result.setUnion_set(this.union_set);
      result.setEnum_set(this.enum_set);
      result.setStruct_map(this.struct_map);
      result.setUnion_map(this.union_map);
      result.setEnum_map(this.enum_map);
      result.setStruct_map_2(this.struct_map_2);
      result.setUnion_map_2(this.union_map_2);
      result.setEnum_map_2(this.enum_map_2);
      result.setList_map(this.list_map);
      result.setList_map_2(this.list_map_2);
      result.setSet_map(this.set_map);
      result.setSet_map_2(this.set_map_2);
      result.setMap_map(this.map_map);
      result.setMap_map_2(this.map_map_2);
      result.setList_list_i32(this.list_list_i32);
      result.setList_list_struct(this.list_list_struct);
      result.setList_set_i32(this.list_set_i32);
      result.setList_set_struct(this.list_set_struct);
      result.setList_map_i32_i32(this.list_map_i32_i32);
      result.setList_map_i32_struct(this.list_map_i32_struct);
      result.setList_map_struct_i32(this.list_map_struct_i32);
      result.setSet_list_i32(this.set_list_i32);
      result.setSet_list_struct(this.set_list_struct);
      result.setSet_set_i32(this.set_set_i32);
      result.setSet_set_struct(this.set_set_struct);
      result.setSet_map_i32_i32(this.set_map_i32_i32);
      result.setSet_map_i32_struct(this.set_map_i32_struct);
      result.setSet_map_struct_i32(this.set_map_struct_i32);
      result.setMap_i32_map_i32_i32(this.map_i32_map_i32_i32);
      result.setMap_i32_map_struct_i32(this.map_i32_map_struct_i32);
      result.setMap_i32_map_i32_struct(this.map_i32_map_i32_struct);
      result.setMap_i32_map_list_i32_i32(this.map_i32_map_list_i32_i32);
      result.setMap_i32_map_list_struct_i32(this.map_i32_map_list_struct_i32);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Containers(Containers other) {
    if (other.isSetStruct_list()) {
      this.struct_list = TBaseHelper.deepCopy(other.struct_list);
    }
    if (other.isSetUnion_list()) {
      this.union_list = TBaseHelper.deepCopy(other.union_list);
    }
    if (other.isSetEnum_list()) {
      this.enum_list = TBaseHelper.deepCopy(other.enum_list);
    }
    if (other.isSetStruct_set()) {
      this.struct_set = TBaseHelper.deepCopy(other.struct_set);
    }
    if (other.isSetUnion_set()) {
      this.union_set = TBaseHelper.deepCopy(other.union_set);
    }
    if (other.isSetEnum_set()) {
      this.enum_set = TBaseHelper.deepCopy(other.enum_set);
    }
    if (other.isSetStruct_map()) {
      this.struct_map = TBaseHelper.deepCopy(other.struct_map);
    }
    if (other.isSetUnion_map()) {
      this.union_map = TBaseHelper.deepCopy(other.union_map);
    }
    if (other.isSetEnum_map()) {
      this.enum_map = TBaseHelper.deepCopy(other.enum_map);
    }
    if (other.isSetStruct_map_2()) {
      this.struct_map_2 = TBaseHelper.deepCopy(other.struct_map_2);
    }
    if (other.isSetUnion_map_2()) {
      this.union_map_2 = TBaseHelper.deepCopy(other.union_map_2);
    }
    if (other.isSetEnum_map_2()) {
      this.enum_map_2 = TBaseHelper.deepCopy(other.enum_map_2);
    }
    if (other.isSetList_map()) {
      this.list_map = TBaseHelper.deepCopy(other.list_map);
    }
    if (other.isSetList_map_2()) {
      this.list_map_2 = TBaseHelper.deepCopy(other.list_map_2);
    }
    if (other.isSetSet_map()) {
      this.set_map = TBaseHelper.deepCopy(other.set_map);
    }
    if (other.isSetSet_map_2()) {
      this.set_map_2 = TBaseHelper.deepCopy(other.set_map_2);
    }
    if (other.isSetMap_map()) {
      this.map_map = TBaseHelper.deepCopy(other.map_map);
    }
    if (other.isSetMap_map_2()) {
      this.map_map_2 = TBaseHelper.deepCopy(other.map_map_2);
    }
    if (other.isSetList_list_i32()) {
      this.list_list_i32 = TBaseHelper.deepCopy(other.list_list_i32);
    }
    if (other.isSetList_list_struct()) {
      this.list_list_struct = TBaseHelper.deepCopy(other.list_list_struct);
    }
    if (other.isSetList_set_i32()) {
      this.list_set_i32 = TBaseHelper.deepCopy(other.list_set_i32);
    }
    if (other.isSetList_set_struct()) {
      this.list_set_struct = TBaseHelper.deepCopy(other.list_set_struct);
    }
    if (other.isSetList_map_i32_i32()) {
      this.list_map_i32_i32 = TBaseHelper.deepCopy(other.list_map_i32_i32);
    }
    if (other.isSetList_map_i32_struct()) {
      this.list_map_i32_struct = TBaseHelper.deepCopy(other.list_map_i32_struct);
    }
    if (other.isSetList_map_struct_i32()) {
      this.list_map_struct_i32 = TBaseHelper.deepCopy(other.list_map_struct_i32);
    }
    if (other.isSetSet_list_i32()) {
      this.set_list_i32 = TBaseHelper.deepCopy(other.set_list_i32);
    }
    if (other.isSetSet_list_struct()) {
      this.set_list_struct = TBaseHelper.deepCopy(other.set_list_struct);
    }
    if (other.isSetSet_set_i32()) {
      this.set_set_i32 = TBaseHelper.deepCopy(other.set_set_i32);
    }
    if (other.isSetSet_set_struct()) {
      this.set_set_struct = TBaseHelper.deepCopy(other.set_set_struct);
    }
    if (other.isSetSet_map_i32_i32()) {
      this.set_map_i32_i32 = TBaseHelper.deepCopy(other.set_map_i32_i32);
    }
    if (other.isSetSet_map_i32_struct()) {
      this.set_map_i32_struct = TBaseHelper.deepCopy(other.set_map_i32_struct);
    }
    if (other.isSetSet_map_struct_i32()) {
      this.set_map_struct_i32 = TBaseHelper.deepCopy(other.set_map_struct_i32);
    }
    if (other.isSetMap_i32_map_i32_i32()) {
      this.map_i32_map_i32_i32 = TBaseHelper.deepCopy(other.map_i32_map_i32_i32);
    }
    if (other.isSetMap_i32_map_struct_i32()) {
      this.map_i32_map_struct_i32 = TBaseHelper.deepCopy(other.map_i32_map_struct_i32);
    }
    if (other.isSetMap_i32_map_i32_struct()) {
      this.map_i32_map_i32_struct = TBaseHelper.deepCopy(other.map_i32_map_i32_struct);
    }
    if (other.isSetMap_i32_map_list_i32_i32()) {
      this.map_i32_map_list_i32_i32 = TBaseHelper.deepCopy(other.map_i32_map_list_i32_i32);
    }
    if (other.isSetMap_i32_map_list_struct_i32()) {
      this.map_i32_map_list_struct_i32 = TBaseHelper.deepCopy(other.map_i32_map_list_struct_i32);
    }
  }

  public Containers deepCopy() {
    return new Containers(this);
  }

  public List<MyStruct> getStruct_list() {
    return this.struct_list;
  }

  public Containers setStruct_list(List<MyStruct> struct_list) {
    this.struct_list = struct_list;
    return this;
  }

  public void unsetStruct_list() {
    this.struct_list = null;
  }

  // Returns true if field struct_list is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_list() {
    return this.struct_list != null;
  }

  public void setStruct_listIsSet(boolean __value) {
    if (!__value) {
      this.struct_list = null;
    }
  }

  public List<MyUnion> getUnion_list() {
    return this.union_list;
  }

  public Containers setUnion_list(List<MyUnion> union_list) {
    this.union_list = union_list;
    return this;
  }

  public void unsetUnion_list() {
    this.union_list = null;
  }

  // Returns true if field union_list is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_list() {
    return this.union_list != null;
  }

  public void setUnion_listIsSet(boolean __value) {
    if (!__value) {
      this.union_list = null;
    }
  }

  public List<MyEnum> getEnum_list() {
    return this.enum_list;
  }

  public Containers setEnum_list(List<MyEnum> enum_list) {
    this.enum_list = enum_list;
    return this;
  }

  public void unsetEnum_list() {
    this.enum_list = null;
  }

  // Returns true if field enum_list is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_list() {
    return this.enum_list != null;
  }

  public void setEnum_listIsSet(boolean __value) {
    if (!__value) {
      this.enum_list = null;
    }
  }

  public Set<MyStruct> getStruct_set() {
    return this.struct_set;
  }

  public Containers setStruct_set(Set<MyStruct> struct_set) {
    this.struct_set = struct_set;
    return this;
  }

  public void unsetStruct_set() {
    this.struct_set = null;
  }

  // Returns true if field struct_set is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_set() {
    return this.struct_set != null;
  }

  public void setStruct_setIsSet(boolean __value) {
    if (!__value) {
      this.struct_set = null;
    }
  }

  public Set<MyUnion> getUnion_set() {
    return this.union_set;
  }

  public Containers setUnion_set(Set<MyUnion> union_set) {
    this.union_set = union_set;
    return this;
  }

  public void unsetUnion_set() {
    this.union_set = null;
  }

  // Returns true if field union_set is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_set() {
    return this.union_set != null;
  }

  public void setUnion_setIsSet(boolean __value) {
    if (!__value) {
      this.union_set = null;
    }
  }

  public Set<MyEnum> getEnum_set() {
    return this.enum_set;
  }

  public Containers setEnum_set(Set<MyEnum> enum_set) {
    this.enum_set = enum_set;
    return this;
  }

  public void unsetEnum_set() {
    this.enum_set = null;
  }

  // Returns true if field enum_set is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_set() {
    return this.enum_set != null;
  }

  public void setEnum_setIsSet(boolean __value) {
    if (!__value) {
      this.enum_set = null;
    }
  }

  public Map<MyStruct,Long> getStruct_map() {
    return this.struct_map;
  }

  public Containers setStruct_map(Map<MyStruct,Long> struct_map) {
    this.struct_map = struct_map;
    return this;
  }

  public void unsetStruct_map() {
    this.struct_map = null;
  }

  // Returns true if field struct_map is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_map() {
    return this.struct_map != null;
  }

  public void setStruct_mapIsSet(boolean __value) {
    if (!__value) {
      this.struct_map = null;
    }
  }

  public Map<MyUnion,Long> getUnion_map() {
    return this.union_map;
  }

  public Containers setUnion_map(Map<MyUnion,Long> union_map) {
    this.union_map = union_map;
    return this;
  }

  public void unsetUnion_map() {
    this.union_map = null;
  }

  // Returns true if field union_map is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_map() {
    return this.union_map != null;
  }

  public void setUnion_mapIsSet(boolean __value) {
    if (!__value) {
      this.union_map = null;
    }
  }

  public Map<MyEnum,Long> getEnum_map() {
    return this.enum_map;
  }

  public Containers setEnum_map(Map<MyEnum,Long> enum_map) {
    this.enum_map = enum_map;
    return this;
  }

  public void unsetEnum_map() {
    this.enum_map = null;
  }

  // Returns true if field enum_map is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_map() {
    return this.enum_map != null;
  }

  public void setEnum_mapIsSet(boolean __value) {
    if (!__value) {
      this.enum_map = null;
    }
  }

  public Map<Integer,MyStruct> getStruct_map_2() {
    return this.struct_map_2;
  }

  public Containers setStruct_map_2(Map<Integer,MyStruct> struct_map_2) {
    this.struct_map_2 = struct_map_2;
    return this;
  }

  public void unsetStruct_map_2() {
    this.struct_map_2 = null;
  }

  // Returns true if field struct_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_map_2() {
    return this.struct_map_2 != null;
  }

  public void setStruct_map_2IsSet(boolean __value) {
    if (!__value) {
      this.struct_map_2 = null;
    }
  }

  public Map<Integer,MyUnion> getUnion_map_2() {
    return this.union_map_2;
  }

  public Containers setUnion_map_2(Map<Integer,MyUnion> union_map_2) {
    this.union_map_2 = union_map_2;
    return this;
  }

  public void unsetUnion_map_2() {
    this.union_map_2 = null;
  }

  // Returns true if field union_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetUnion_map_2() {
    return this.union_map_2 != null;
  }

  public void setUnion_map_2IsSet(boolean __value) {
    if (!__value) {
      this.union_map_2 = null;
    }
  }

  public Map<Integer,MyEnum> getEnum_map_2() {
    return this.enum_map_2;
  }

  public Containers setEnum_map_2(Map<Integer,MyEnum> enum_map_2) {
    this.enum_map_2 = enum_map_2;
    return this;
  }

  public void unsetEnum_map_2() {
    this.enum_map_2 = null;
  }

  // Returns true if field enum_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetEnum_map_2() {
    return this.enum_map_2 != null;
  }

  public void setEnum_map_2IsSet(boolean __value) {
    if (!__value) {
      this.enum_map_2 = null;
    }
  }

  public Map<List<Integer>,Integer> getList_map() {
    return this.list_map;
  }

  public Containers setList_map(Map<List<Integer>,Integer> list_map) {
    this.list_map = list_map;
    return this;
  }

  public void unsetList_map() {
    this.list_map = null;
  }

  // Returns true if field list_map is set (has been assigned a value) and false otherwise
  public boolean isSetList_map() {
    return this.list_map != null;
  }

  public void setList_mapIsSet(boolean __value) {
    if (!__value) {
      this.list_map = null;
    }
  }

  public Map<Integer,List<Integer>> getList_map_2() {
    return this.list_map_2;
  }

  public Containers setList_map_2(Map<Integer,List<Integer>> list_map_2) {
    this.list_map_2 = list_map_2;
    return this;
  }

  public void unsetList_map_2() {
    this.list_map_2 = null;
  }

  // Returns true if field list_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetList_map_2() {
    return this.list_map_2 != null;
  }

  public void setList_map_2IsSet(boolean __value) {
    if (!__value) {
      this.list_map_2 = null;
    }
  }

  public Map<Set<Integer>,Integer> getSet_map() {
    return this.set_map;
  }

  public Containers setSet_map(Map<Set<Integer>,Integer> set_map) {
    this.set_map = set_map;
    return this;
  }

  public void unsetSet_map() {
    this.set_map = null;
  }

  // Returns true if field set_map is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map() {
    return this.set_map != null;
  }

  public void setSet_mapIsSet(boolean __value) {
    if (!__value) {
      this.set_map = null;
    }
  }

  public Map<Integer,Set<Integer>> getSet_map_2() {
    return this.set_map_2;
  }

  public Containers setSet_map_2(Map<Integer,Set<Integer>> set_map_2) {
    this.set_map_2 = set_map_2;
    return this;
  }

  public void unsetSet_map_2() {
    this.set_map_2 = null;
  }

  // Returns true if field set_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map_2() {
    return this.set_map_2 != null;
  }

  public void setSet_map_2IsSet(boolean __value) {
    if (!__value) {
      this.set_map_2 = null;
    }
  }

  public Map<Map<Integer,Integer>,Integer> getMap_map() {
    return this.map_map;
  }

  public Containers setMap_map(Map<Map<Integer,Integer>,Integer> map_map) {
    this.map_map = map_map;
    return this;
  }

  public void unsetMap_map() {
    this.map_map = null;
  }

  // Returns true if field map_map is set (has been assigned a value) and false otherwise
  public boolean isSetMap_map() {
    return this.map_map != null;
  }

  public void setMap_mapIsSet(boolean __value) {
    if (!__value) {
      this.map_map = null;
    }
  }

  public Map<Integer,Map<Integer,Integer>> getMap_map_2() {
    return this.map_map_2;
  }

  public Containers setMap_map_2(Map<Integer,Map<Integer,Integer>> map_map_2) {
    this.map_map_2 = map_map_2;
    return this;
  }

  public void unsetMap_map_2() {
    this.map_map_2 = null;
  }

  // Returns true if field map_map_2 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_map_2() {
    return this.map_map_2 != null;
  }

  public void setMap_map_2IsSet(boolean __value) {
    if (!__value) {
      this.map_map_2 = null;
    }
  }

  public List<List<Integer>> getList_list_i32() {
    return this.list_list_i32;
  }

  public Containers setList_list_i32(List<List<Integer>> list_list_i32) {
    this.list_list_i32 = list_list_i32;
    return this;
  }

  public void unsetList_list_i32() {
    this.list_list_i32 = null;
  }

  // Returns true if field list_list_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetList_list_i32() {
    return this.list_list_i32 != null;
  }

  public void setList_list_i32IsSet(boolean __value) {
    if (!__value) {
      this.list_list_i32 = null;
    }
  }

  public List<List<MyStruct>> getList_list_struct() {
    return this.list_list_struct;
  }

  public Containers setList_list_struct(List<List<MyStruct>> list_list_struct) {
    this.list_list_struct = list_list_struct;
    return this;
  }

  public void unsetList_list_struct() {
    this.list_list_struct = null;
  }

  // Returns true if field list_list_struct is set (has been assigned a value) and false otherwise
  public boolean isSetList_list_struct() {
    return this.list_list_struct != null;
  }

  public void setList_list_structIsSet(boolean __value) {
    if (!__value) {
      this.list_list_struct = null;
    }
  }

  public List<Set<Integer>> getList_set_i32() {
    return this.list_set_i32;
  }

  public Containers setList_set_i32(List<Set<Integer>> list_set_i32) {
    this.list_set_i32 = list_set_i32;
    return this;
  }

  public void unsetList_set_i32() {
    this.list_set_i32 = null;
  }

  // Returns true if field list_set_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetList_set_i32() {
    return this.list_set_i32 != null;
  }

  public void setList_set_i32IsSet(boolean __value) {
    if (!__value) {
      this.list_set_i32 = null;
    }
  }

  public List<Set<MyStruct>> getList_set_struct() {
    return this.list_set_struct;
  }

  public Containers setList_set_struct(List<Set<MyStruct>> list_set_struct) {
    this.list_set_struct = list_set_struct;
    return this;
  }

  public void unsetList_set_struct() {
    this.list_set_struct = null;
  }

  // Returns true if field list_set_struct is set (has been assigned a value) and false otherwise
  public boolean isSetList_set_struct() {
    return this.list_set_struct != null;
  }

  public void setList_set_structIsSet(boolean __value) {
    if (!__value) {
      this.list_set_struct = null;
    }
  }

  public List<Map<Integer,Integer>> getList_map_i32_i32() {
    return this.list_map_i32_i32;
  }

  public Containers setList_map_i32_i32(List<Map<Integer,Integer>> list_map_i32_i32) {
    this.list_map_i32_i32 = list_map_i32_i32;
    return this;
  }

  public void unsetList_map_i32_i32() {
    this.list_map_i32_i32 = null;
  }

  // Returns true if field list_map_i32_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetList_map_i32_i32() {
    return this.list_map_i32_i32 != null;
  }

  public void setList_map_i32_i32IsSet(boolean __value) {
    if (!__value) {
      this.list_map_i32_i32 = null;
    }
  }

  public List<Map<Integer,MyStruct>> getList_map_i32_struct() {
    return this.list_map_i32_struct;
  }

  public Containers setList_map_i32_struct(List<Map<Integer,MyStruct>> list_map_i32_struct) {
    this.list_map_i32_struct = list_map_i32_struct;
    return this;
  }

  public void unsetList_map_i32_struct() {
    this.list_map_i32_struct = null;
  }

  // Returns true if field list_map_i32_struct is set (has been assigned a value) and false otherwise
  public boolean isSetList_map_i32_struct() {
    return this.list_map_i32_struct != null;
  }

  public void setList_map_i32_structIsSet(boolean __value) {
    if (!__value) {
      this.list_map_i32_struct = null;
    }
  }

  public List<Map<MyStruct,Integer>> getList_map_struct_i32() {
    return this.list_map_struct_i32;
  }

  public Containers setList_map_struct_i32(List<Map<MyStruct,Integer>> list_map_struct_i32) {
    this.list_map_struct_i32 = list_map_struct_i32;
    return this;
  }

  public void unsetList_map_struct_i32() {
    this.list_map_struct_i32 = null;
  }

  // Returns true if field list_map_struct_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetList_map_struct_i32() {
    return this.list_map_struct_i32 != null;
  }

  public void setList_map_struct_i32IsSet(boolean __value) {
    if (!__value) {
      this.list_map_struct_i32 = null;
    }
  }

  public Set<List<Integer>> getSet_list_i32() {
    return this.set_list_i32;
  }

  public Containers setSet_list_i32(Set<List<Integer>> set_list_i32) {
    this.set_list_i32 = set_list_i32;
    return this;
  }

  public void unsetSet_list_i32() {
    this.set_list_i32 = null;
  }

  // Returns true if field set_list_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_list_i32() {
    return this.set_list_i32 != null;
  }

  public void setSet_list_i32IsSet(boolean __value) {
    if (!__value) {
      this.set_list_i32 = null;
    }
  }

  public Set<List<MyStruct>> getSet_list_struct() {
    return this.set_list_struct;
  }

  public Containers setSet_list_struct(Set<List<MyStruct>> set_list_struct) {
    this.set_list_struct = set_list_struct;
    return this;
  }

  public void unsetSet_list_struct() {
    this.set_list_struct = null;
  }

  // Returns true if field set_list_struct is set (has been assigned a value) and false otherwise
  public boolean isSetSet_list_struct() {
    return this.set_list_struct != null;
  }

  public void setSet_list_structIsSet(boolean __value) {
    if (!__value) {
      this.set_list_struct = null;
    }
  }

  public Set<Set<Integer>> getSet_set_i32() {
    return this.set_set_i32;
  }

  public Containers setSet_set_i32(Set<Set<Integer>> set_set_i32) {
    this.set_set_i32 = set_set_i32;
    return this;
  }

  public void unsetSet_set_i32() {
    this.set_set_i32 = null;
  }

  // Returns true if field set_set_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_set_i32() {
    return this.set_set_i32 != null;
  }

  public void setSet_set_i32IsSet(boolean __value) {
    if (!__value) {
      this.set_set_i32 = null;
    }
  }

  public Set<Set<MyStruct>> getSet_set_struct() {
    return this.set_set_struct;
  }

  public Containers setSet_set_struct(Set<Set<MyStruct>> set_set_struct) {
    this.set_set_struct = set_set_struct;
    return this;
  }

  public void unsetSet_set_struct() {
    this.set_set_struct = null;
  }

  // Returns true if field set_set_struct is set (has been assigned a value) and false otherwise
  public boolean isSetSet_set_struct() {
    return this.set_set_struct != null;
  }

  public void setSet_set_structIsSet(boolean __value) {
    if (!__value) {
      this.set_set_struct = null;
    }
  }

  public Set<Map<Integer,Integer>> getSet_map_i32_i32() {
    return this.set_map_i32_i32;
  }

  public Containers setSet_map_i32_i32(Set<Map<Integer,Integer>> set_map_i32_i32) {
    this.set_map_i32_i32 = set_map_i32_i32;
    return this;
  }

  public void unsetSet_map_i32_i32() {
    this.set_map_i32_i32 = null;
  }

  // Returns true if field set_map_i32_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map_i32_i32() {
    return this.set_map_i32_i32 != null;
  }

  public void setSet_map_i32_i32IsSet(boolean __value) {
    if (!__value) {
      this.set_map_i32_i32 = null;
    }
  }

  public Set<Map<Integer,MyStruct>> getSet_map_i32_struct() {
    return this.set_map_i32_struct;
  }

  public Containers setSet_map_i32_struct(Set<Map<Integer,MyStruct>> set_map_i32_struct) {
    this.set_map_i32_struct = set_map_i32_struct;
    return this;
  }

  public void unsetSet_map_i32_struct() {
    this.set_map_i32_struct = null;
  }

  // Returns true if field set_map_i32_struct is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map_i32_struct() {
    return this.set_map_i32_struct != null;
  }

  public void setSet_map_i32_structIsSet(boolean __value) {
    if (!__value) {
      this.set_map_i32_struct = null;
    }
  }

  public Set<Map<MyStruct,Integer>> getSet_map_struct_i32() {
    return this.set_map_struct_i32;
  }

  public Containers setSet_map_struct_i32(Set<Map<MyStruct,Integer>> set_map_struct_i32) {
    this.set_map_struct_i32 = set_map_struct_i32;
    return this;
  }

  public void unsetSet_map_struct_i32() {
    this.set_map_struct_i32 = null;
  }

  // Returns true if field set_map_struct_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetSet_map_struct_i32() {
    return this.set_map_struct_i32 != null;
  }

  public void setSet_map_struct_i32IsSet(boolean __value) {
    if (!__value) {
      this.set_map_struct_i32 = null;
    }
  }

  public Map<Integer,Map<Integer,Integer>> getMap_i32_map_i32_i32() {
    return this.map_i32_map_i32_i32;
  }

  public Containers setMap_i32_map_i32_i32(Map<Integer,Map<Integer,Integer>> map_i32_map_i32_i32) {
    this.map_i32_map_i32_i32 = map_i32_map_i32_i32;
    return this;
  }

  public void unsetMap_i32_map_i32_i32() {
    this.map_i32_map_i32_i32 = null;
  }

  // Returns true if field map_i32_map_i32_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_i32_map_i32_i32() {
    return this.map_i32_map_i32_i32 != null;
  }

  public void setMap_i32_map_i32_i32IsSet(boolean __value) {
    if (!__value) {
      this.map_i32_map_i32_i32 = null;
    }
  }

  public Map<Integer,Map<MyStruct,Integer>> getMap_i32_map_struct_i32() {
    return this.map_i32_map_struct_i32;
  }

  public Containers setMap_i32_map_struct_i32(Map<Integer,Map<MyStruct,Integer>> map_i32_map_struct_i32) {
    this.map_i32_map_struct_i32 = map_i32_map_struct_i32;
    return this;
  }

  public void unsetMap_i32_map_struct_i32() {
    this.map_i32_map_struct_i32 = null;
  }

  // Returns true if field map_i32_map_struct_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_i32_map_struct_i32() {
    return this.map_i32_map_struct_i32 != null;
  }

  public void setMap_i32_map_struct_i32IsSet(boolean __value) {
    if (!__value) {
      this.map_i32_map_struct_i32 = null;
    }
  }

  public Map<Integer,Map<Integer,MyStruct>> getMap_i32_map_i32_struct() {
    return this.map_i32_map_i32_struct;
  }

  public Containers setMap_i32_map_i32_struct(Map<Integer,Map<Integer,MyStruct>> map_i32_map_i32_struct) {
    this.map_i32_map_i32_struct = map_i32_map_i32_struct;
    return this;
  }

  public void unsetMap_i32_map_i32_struct() {
    this.map_i32_map_i32_struct = null;
  }

  // Returns true if field map_i32_map_i32_struct is set (has been assigned a value) and false otherwise
  public boolean isSetMap_i32_map_i32_struct() {
    return this.map_i32_map_i32_struct != null;
  }

  public void setMap_i32_map_i32_structIsSet(boolean __value) {
    if (!__value) {
      this.map_i32_map_i32_struct = null;
    }
  }

  public Map<Integer,List<Map<Integer,Integer>>> getMap_i32_map_list_i32_i32() {
    return this.map_i32_map_list_i32_i32;
  }

  public Containers setMap_i32_map_list_i32_i32(Map<Integer,List<Map<Integer,Integer>>> map_i32_map_list_i32_i32) {
    this.map_i32_map_list_i32_i32 = map_i32_map_list_i32_i32;
    return this;
  }

  public void unsetMap_i32_map_list_i32_i32() {
    this.map_i32_map_list_i32_i32 = null;
  }

  // Returns true if field map_i32_map_list_i32_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_i32_map_list_i32_i32() {
    return this.map_i32_map_list_i32_i32 != null;
  }

  public void setMap_i32_map_list_i32_i32IsSet(boolean __value) {
    if (!__value) {
      this.map_i32_map_list_i32_i32 = null;
    }
  }

  public Map<Integer,List<Map<MyStruct,Integer>>> getMap_i32_map_list_struct_i32() {
    return this.map_i32_map_list_struct_i32;
  }

  public Containers setMap_i32_map_list_struct_i32(Map<Integer,List<Map<MyStruct,Integer>>> map_i32_map_list_struct_i32) {
    this.map_i32_map_list_struct_i32 = map_i32_map_list_struct_i32;
    return this;
  }

  public void unsetMap_i32_map_list_struct_i32() {
    this.map_i32_map_list_struct_i32 = null;
  }

  // Returns true if field map_i32_map_list_struct_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetMap_i32_map_list_struct_i32() {
    return this.map_i32_map_list_struct_i32 != null;
  }

  public void setMap_i32_map_list_struct_i32IsSet(boolean __value) {
    if (!__value) {
      this.map_i32_map_list_struct_i32 = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case STRUCT_LIST:
      if (__value == null) {
        unsetStruct_list();
      } else {
        setStruct_list((List<MyStruct>)__value);
      }
      break;

    case UNION_LIST:
      if (__value == null) {
        unsetUnion_list();
      } else {
        setUnion_list((List<MyUnion>)__value);
      }
      break;

    case ENUM_LIST:
      if (__value == null) {
        unsetEnum_list();
      } else {
        setEnum_list((List<MyEnum>)__value);
      }
      break;

    case STRUCT_SET:
      if (__value == null) {
        unsetStruct_set();
      } else {
        setStruct_set((Set<MyStruct>)__value);
      }
      break;

    case UNION_SET:
      if (__value == null) {
        unsetUnion_set();
      } else {
        setUnion_set((Set<MyUnion>)__value);
      }
      break;

    case ENUM_SET:
      if (__value == null) {
        unsetEnum_set();
      } else {
        setEnum_set((Set<MyEnum>)__value);
      }
      break;

    case STRUCT_MAP:
      if (__value == null) {
        unsetStruct_map();
      } else {
        setStruct_map((Map<MyStruct,Long>)__value);
      }
      break;

    case UNION_MAP:
      if (__value == null) {
        unsetUnion_map();
      } else {
        setUnion_map((Map<MyUnion,Long>)__value);
      }
      break;

    case ENUM_MAP:
      if (__value == null) {
        unsetEnum_map();
      } else {
        setEnum_map((Map<MyEnum,Long>)__value);
      }
      break;

    case STRUCT_MAP_2:
      if (__value == null) {
        unsetStruct_map_2();
      } else {
        setStruct_map_2((Map<Integer,MyStruct>)__value);
      }
      break;

    case UNION_MAP_2:
      if (__value == null) {
        unsetUnion_map_2();
      } else {
        setUnion_map_2((Map<Integer,MyUnion>)__value);
      }
      break;

    case ENUM_MAP_2:
      if (__value == null) {
        unsetEnum_map_2();
      } else {
        setEnum_map_2((Map<Integer,MyEnum>)__value);
      }
      break;

    case LIST_MAP:
      if (__value == null) {
        unsetList_map();
      } else {
        setList_map((Map<List<Integer>,Integer>)__value);
      }
      break;

    case LIST_MAP_2:
      if (__value == null) {
        unsetList_map_2();
      } else {
        setList_map_2((Map<Integer,List<Integer>>)__value);
      }
      break;

    case SET_MAP:
      if (__value == null) {
        unsetSet_map();
      } else {
        setSet_map((Map<Set<Integer>,Integer>)__value);
      }
      break;

    case SET_MAP_2:
      if (__value == null) {
        unsetSet_map_2();
      } else {
        setSet_map_2((Map<Integer,Set<Integer>>)__value);
      }
      break;

    case MAP_MAP:
      if (__value == null) {
        unsetMap_map();
      } else {
        setMap_map((Map<Map<Integer,Integer>,Integer>)__value);
      }
      break;

    case MAP_MAP_2:
      if (__value == null) {
        unsetMap_map_2();
      } else {
        setMap_map_2((Map<Integer,Map<Integer,Integer>>)__value);
      }
      break;

    case LIST_LIST_I32:
      if (__value == null) {
        unsetList_list_i32();
      } else {
        setList_list_i32((List<List<Integer>>)__value);
      }
      break;

    case LIST_LIST_STRUCT:
      if (__value == null) {
        unsetList_list_struct();
      } else {
        setList_list_struct((List<List<MyStruct>>)__value);
      }
      break;

    case LIST_SET_I32:
      if (__value == null) {
        unsetList_set_i32();
      } else {
        setList_set_i32((List<Set<Integer>>)__value);
      }
      break;

    case LIST_SET_STRUCT:
      if (__value == null) {
        unsetList_set_struct();
      } else {
        setList_set_struct((List<Set<MyStruct>>)__value);
      }
      break;

    case LIST_MAP_I32_I32:
      if (__value == null) {
        unsetList_map_i32_i32();
      } else {
        setList_map_i32_i32((List<Map<Integer,Integer>>)__value);
      }
      break;

    case LIST_MAP_I32_STRUCT:
      if (__value == null) {
        unsetList_map_i32_struct();
      } else {
        setList_map_i32_struct((List<Map<Integer,MyStruct>>)__value);
      }
      break;

    case LIST_MAP_STRUCT_I32:
      if (__value == null) {
        unsetList_map_struct_i32();
      } else {
        setList_map_struct_i32((List<Map<MyStruct,Integer>>)__value);
      }
      break;

    case SET_LIST_I32:
      if (__value == null) {
        unsetSet_list_i32();
      } else {
        setSet_list_i32((Set<List<Integer>>)__value);
      }
      break;

    case SET_LIST_STRUCT:
      if (__value == null) {
        unsetSet_list_struct();
      } else {
        setSet_list_struct((Set<List<MyStruct>>)__value);
      }
      break;

    case SET_SET_I32:
      if (__value == null) {
        unsetSet_set_i32();
      } else {
        setSet_set_i32((Set<Set<Integer>>)__value);
      }
      break;

    case SET_SET_STRUCT:
      if (__value == null) {
        unsetSet_set_struct();
      } else {
        setSet_set_struct((Set<Set<MyStruct>>)__value);
      }
      break;

    case SET_MAP_I32_I32:
      if (__value == null) {
        unsetSet_map_i32_i32();
      } else {
        setSet_map_i32_i32((Set<Map<Integer,Integer>>)__value);
      }
      break;

    case SET_MAP_I32_STRUCT:
      if (__value == null) {
        unsetSet_map_i32_struct();
      } else {
        setSet_map_i32_struct((Set<Map<Integer,MyStruct>>)__value);
      }
      break;

    case SET_MAP_STRUCT_I32:
      if (__value == null) {
        unsetSet_map_struct_i32();
      } else {
        setSet_map_struct_i32((Set<Map<MyStruct,Integer>>)__value);
      }
      break;

    case MAP_I32_MAP_I32_I32:
      if (__value == null) {
        unsetMap_i32_map_i32_i32();
      } else {
        setMap_i32_map_i32_i32((Map<Integer,Map<Integer,Integer>>)__value);
      }
      break;

    case MAP_I32_MAP_STRUCT_I32:
      if (__value == null) {
        unsetMap_i32_map_struct_i32();
      } else {
        setMap_i32_map_struct_i32((Map<Integer,Map<MyStruct,Integer>>)__value);
      }
      break;

    case MAP_I32_MAP_I32_STRUCT:
      if (__value == null) {
        unsetMap_i32_map_i32_struct();
      } else {
        setMap_i32_map_i32_struct((Map<Integer,Map<Integer,MyStruct>>)__value);
      }
      break;

    case MAP_I32_MAP_LIST_I32_I32:
      if (__value == null) {
        unsetMap_i32_map_list_i32_i32();
      } else {
        setMap_i32_map_list_i32_i32((Map<Integer,List<Map<Integer,Integer>>>)__value);
      }
      break;

    case MAP_I32_MAP_LIST_STRUCT_I32:
      if (__value == null) {
        unsetMap_i32_map_list_struct_i32();
      } else {
        setMap_i32_map_list_struct_i32((Map<Integer,List<Map<MyStruct,Integer>>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case STRUCT_LIST:
      return getStruct_list();

    case UNION_LIST:
      return getUnion_list();

    case ENUM_LIST:
      return getEnum_list();

    case STRUCT_SET:
      return getStruct_set();

    case UNION_SET:
      return getUnion_set();

    case ENUM_SET:
      return getEnum_set();

    case STRUCT_MAP:
      return getStruct_map();

    case UNION_MAP:
      return getUnion_map();

    case ENUM_MAP:
      return getEnum_map();

    case STRUCT_MAP_2:
      return getStruct_map_2();

    case UNION_MAP_2:
      return getUnion_map_2();

    case ENUM_MAP_2:
      return getEnum_map_2();

    case LIST_MAP:
      return getList_map();

    case LIST_MAP_2:
      return getList_map_2();

    case SET_MAP:
      return getSet_map();

    case SET_MAP_2:
      return getSet_map_2();

    case MAP_MAP:
      return getMap_map();

    case MAP_MAP_2:
      return getMap_map_2();

    case LIST_LIST_I32:
      return getList_list_i32();

    case LIST_LIST_STRUCT:
      return getList_list_struct();

    case LIST_SET_I32:
      return getList_set_i32();

    case LIST_SET_STRUCT:
      return getList_set_struct();

    case LIST_MAP_I32_I32:
      return getList_map_i32_i32();

    case LIST_MAP_I32_STRUCT:
      return getList_map_i32_struct();

    case LIST_MAP_STRUCT_I32:
      return getList_map_struct_i32();

    case SET_LIST_I32:
      return getSet_list_i32();

    case SET_LIST_STRUCT:
      return getSet_list_struct();

    case SET_SET_I32:
      return getSet_set_i32();

    case SET_SET_STRUCT:
      return getSet_set_struct();

    case SET_MAP_I32_I32:
      return getSet_map_i32_i32();

    case SET_MAP_I32_STRUCT:
      return getSet_map_i32_struct();

    case SET_MAP_STRUCT_I32:
      return getSet_map_struct_i32();

    case MAP_I32_MAP_I32_I32:
      return getMap_i32_map_i32_i32();

    case MAP_I32_MAP_STRUCT_I32:
      return getMap_i32_map_struct_i32();

    case MAP_I32_MAP_I32_STRUCT:
      return getMap_i32_map_i32_struct();

    case MAP_I32_MAP_LIST_I32_I32:
      return getMap_i32_map_list_i32_i32();

    case MAP_I32_MAP_LIST_STRUCT_I32:
      return getMap_i32_map_list_struct_i32();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Containers))
      return false;
    Containers that = (Containers)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_list(), that.isSetStruct_list(), this.struct_list, that.struct_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_list(), that.isSetUnion_list(), this.union_list, that.union_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_list(), that.isSetEnum_list(), this.enum_list, that.enum_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_set(), that.isSetStruct_set(), this.struct_set, that.struct_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_set(), that.isSetUnion_set(), this.union_set, that.union_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_set(), that.isSetEnum_set(), this.enum_set, that.enum_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_map(), that.isSetStruct_map(), this.struct_map, that.struct_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_map(), that.isSetUnion_map(), this.union_map, that.union_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_map(), that.isSetEnum_map(), this.enum_map, that.enum_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStruct_map_2(), that.isSetStruct_map_2(), this.struct_map_2, that.struct_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnion_map_2(), that.isSetUnion_map_2(), this.union_map_2, that.union_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetEnum_map_2(), that.isSetEnum_map_2(), this.enum_map_2, that.enum_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map(), that.isSetList_map(), this.list_map, that.list_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map_2(), that.isSetList_map_2(), this.list_map_2, that.list_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map(), that.isSetSet_map(), this.set_map, that.set_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map_2(), that.isSetSet_map_2(), this.set_map_2, that.set_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_map(), that.isSetMap_map(), this.map_map, that.map_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_map_2(), that.isSetMap_map_2(), this.map_map_2, that.map_map_2)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_list_i32(), that.isSetList_list_i32(), this.list_list_i32, that.list_list_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_list_struct(), that.isSetList_list_struct(), this.list_list_struct, that.list_list_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_set_i32(), that.isSetList_set_i32(), this.list_set_i32, that.list_set_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_set_struct(), that.isSetList_set_struct(), this.list_set_struct, that.list_set_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map_i32_i32(), that.isSetList_map_i32_i32(), this.list_map_i32_i32, that.list_map_i32_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map_i32_struct(), that.isSetList_map_i32_struct(), this.list_map_i32_struct, that.list_map_i32_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetList_map_struct_i32(), that.isSetList_map_struct_i32(), this.list_map_struct_i32, that.list_map_struct_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_list_i32(), that.isSetSet_list_i32(), this.set_list_i32, that.set_list_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_list_struct(), that.isSetSet_list_struct(), this.set_list_struct, that.set_list_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_set_i32(), that.isSetSet_set_i32(), this.set_set_i32, that.set_set_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_set_struct(), that.isSetSet_set_struct(), this.set_set_struct, that.set_set_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map_i32_i32(), that.isSetSet_map_i32_i32(), this.set_map_i32_i32, that.set_map_i32_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map_i32_struct(), that.isSetSet_map_i32_struct(), this.set_map_i32_struct, that.set_map_i32_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSet_map_struct_i32(), that.isSetSet_map_struct_i32(), this.set_map_struct_i32, that.set_map_struct_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_i32_map_i32_i32(), that.isSetMap_i32_map_i32_i32(), this.map_i32_map_i32_i32, that.map_i32_map_i32_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_i32_map_struct_i32(), that.isSetMap_i32_map_struct_i32(), this.map_i32_map_struct_i32, that.map_i32_map_struct_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_i32_map_i32_struct(), that.isSetMap_i32_map_i32_struct(), this.map_i32_map_i32_struct, that.map_i32_map_i32_struct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_i32_map_list_i32_i32(), that.isSetMap_i32_map_list_i32_i32(), this.map_i32_map_list_i32_i32, that.map_i32_map_list_i32_i32)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMap_i32_map_list_struct_i32(), that.isSetMap_i32_map_list_struct_i32(), this.map_i32_map_list_struct_i32, that.map_i32_map_list_struct_i32)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {struct_list, union_list, enum_list, struct_set, union_set, enum_set, struct_map, union_map, enum_map, struct_map_2, union_map_2, enum_map_2, list_map, list_map_2, set_map, set_map_2, map_map, map_map_2, list_list_i32, list_list_struct, list_set_i32, list_set_struct, list_map_i32_i32, list_map_i32_struct, list_map_struct_i32, set_list_i32, set_list_struct, set_set_i32, set_set_struct, set_map_i32_i32, set_map_i32_struct, set_map_struct_i32, map_i32_map_i32_i32, map_i32_map_struct_i32, map_i32_map_i32_struct, map_i32_map_list_i32_i32, map_i32_map_list_struct_i32});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case STRUCT_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list453 = iprot.readListBegin();
              this.struct_list = new ArrayList<MyStruct>(Math.max(0, _list453.size));
              for (int _i454 = 0; 
                   (_list453.size < 0) ? iprot.peekList() : (_i454 < _list453.size); 
                   ++_i454)
              {
                MyStruct _elem455;
                _elem455 = new MyStruct();
                _elem455.read(iprot);
                this.struct_list.add(_elem455);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list456 = iprot.readListBegin();
              this.union_list = new ArrayList<MyUnion>(Math.max(0, _list456.size));
              for (int _i457 = 0; 
                   (_list456.size < 0) ? iprot.peekList() : (_i457 < _list456.size); 
                   ++_i457)
              {
                MyUnion _elem458;
                _elem458 = new MyUnion();
                _elem458.read(iprot);
                this.union_list.add(_elem458);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list459 = iprot.readListBegin();
              this.enum_list = new ArrayList<MyEnum>(Math.max(0, _list459.size));
              for (int _i460 = 0; 
                   (_list459.size < 0) ? iprot.peekList() : (_i460 < _list459.size); 
                   ++_i460)
              {
                MyEnum _elem461;
                _elem461 = MyEnum.findByValue(iprot.readI32());
                this.enum_list.add(_elem461);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set462 = iprot.readSetBegin();
              this.struct_set = new HashSet<MyStruct>(Math.max(0, 2*_set462.size));
              for (int _i463 = 0; 
                   (_set462.size < 0) ? iprot.peekSet() : (_i463 < _set462.size); 
                   ++_i463)
              {
                MyStruct _elem464;
                _elem464 = new MyStruct();
                _elem464.read(iprot);
                this.struct_set.add(_elem464);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set465 = iprot.readSetBegin();
              this.union_set = new HashSet<MyUnion>(Math.max(0, 2*_set465.size));
              for (int _i466 = 0; 
                   (_set465.size < 0) ? iprot.peekSet() : (_i466 < _set465.size); 
                   ++_i466)
              {
                MyUnion _elem467;
                _elem467 = new MyUnion();
                _elem467.read(iprot);
                this.union_set.add(_elem467);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set468 = iprot.readSetBegin();
              this.enum_set = new HashSet<MyEnum>(Math.max(0, 2*_set468.size));
              for (int _i469 = 0; 
                   (_set468.size < 0) ? iprot.peekSet() : (_i469 < _set468.size); 
                   ++_i469)
              {
                MyEnum _elem470;
                _elem470 = MyEnum.findByValue(iprot.readI32());
                this.enum_set.add(_elem470);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map471 = iprot.readMapBegin();
              this.struct_map = new HashMap<MyStruct,Long>(Math.max(0, 2*_map471.size));
              for (int _i472 = 0; 
                   (_map471.size < 0) ? iprot.peekMap() : (_i472 < _map471.size); 
                   ++_i472)
              {
                MyStruct _key473;
                long _val474;
                _key473 = new MyStruct();
                _key473.read(iprot);
                _val474 = iprot.readI64();
                this.struct_map.put(_key473, _val474);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map475 = iprot.readMapBegin();
              this.union_map = new HashMap<MyUnion,Long>(Math.max(0, 2*_map475.size));
              for (int _i476 = 0; 
                   (_map475.size < 0) ? iprot.peekMap() : (_i476 < _map475.size); 
                   ++_i476)
              {
                MyUnion _key477;
                long _val478;
                _key477 = new MyUnion();
                _key477.read(iprot);
                _val478 = iprot.readI64();
                this.union_map.put(_key477, _val478);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map479 = iprot.readMapBegin();
              this.enum_map = new HashMap<MyEnum,Long>(Math.max(0, 2*_map479.size));
              for (int _i480 = 0; 
                   (_map479.size < 0) ? iprot.peekMap() : (_i480 < _map479.size); 
                   ++_i480)
              {
                MyEnum _key481;
                long _val482;
                _key481 = MyEnum.findByValue(iprot.readI32());
                _val482 = iprot.readI64();
                this.enum_map.put(_key481, _val482);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRUCT_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map483 = iprot.readMapBegin();
              this.struct_map_2 = new HashMap<Integer,MyStruct>(Math.max(0, 2*_map483.size));
              for (int _i484 = 0; 
                   (_map483.size < 0) ? iprot.peekMap() : (_i484 < _map483.size); 
                   ++_i484)
              {
                int _key485;
                MyStruct _val486;
                _key485 = iprot.readI32();
                _val486 = new MyStruct();
                _val486.read(iprot);
                this.struct_map_2.put(_key485, _val486);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNION_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map487 = iprot.readMapBegin();
              this.union_map_2 = new HashMap<Integer,MyUnion>(Math.max(0, 2*_map487.size));
              for (int _i488 = 0; 
                   (_map487.size < 0) ? iprot.peekMap() : (_i488 < _map487.size); 
                   ++_i488)
              {
                int _key489;
                MyUnion _val490;
                _key489 = iprot.readI32();
                _val490 = new MyUnion();
                _val490.read(iprot);
                this.union_map_2.put(_key489, _val490);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ENUM_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map491 = iprot.readMapBegin();
              this.enum_map_2 = new HashMap<Integer,MyEnum>(Math.max(0, 2*_map491.size));
              for (int _i492 = 0; 
                   (_map491.size < 0) ? iprot.peekMap() : (_i492 < _map491.size); 
                   ++_i492)
              {
                int _key493;
                MyEnum _val494;
                _key493 = iprot.readI32();
                _val494 = MyEnum.findByValue(iprot.readI32());
                this.enum_map_2.put(_key493, _val494);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map495 = iprot.readMapBegin();
              this.list_map = new HashMap<List<Integer>,Integer>(Math.max(0, 2*_map495.size));
              for (int _i496 = 0; 
                   (_map495.size < 0) ? iprot.peekMap() : (_i496 < _map495.size); 
                   ++_i496)
              {
                List<Integer> _key497;
                int _val498;
                {
                  TList _list499 = iprot.readListBegin();
                  _key497 = new ArrayList<Integer>(Math.max(0, _list499.size));
                  for (int _i500 = 0; 
                       (_list499.size < 0) ? iprot.peekList() : (_i500 < _list499.size); 
                       ++_i500)
                  {
                    int _elem501;
                    _elem501 = iprot.readI32();
                    _key497.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                _val498 = iprot.readI32();
                this.list_map.put(_key497, _val498);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map502 = iprot.readMapBegin();
              this.list_map_2 = new HashMap<Integer,List<Integer>>(Math.max(0, 2*_map502.size));
              for (int _i503 = 0; 
                   (_map502.size < 0) ? iprot.peekMap() : (_i503 < _map502.size); 
                   ++_i503)
              {
                int _key504;
                List<Integer> _val505;
                _key504 = iprot.readI32();
                {
                  TList _list506 = iprot.readListBegin();
                  _val505 = new ArrayList<Integer>(Math.max(0, _list506.size));
                  for (int _i507 = 0; 
                       (_list506.size < 0) ? iprot.peekList() : (_i507 < _list506.size); 
                       ++_i507)
                  {
                    int _elem508;
                    _elem508 = iprot.readI32();
                    _val505.add(_elem508);
                  }
                  iprot.readListEnd();
                }
                this.list_map_2.put(_key504, _val505);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map509 = iprot.readMapBegin();
              this.set_map = new HashMap<Set<Integer>,Integer>(Math.max(0, 2*_map509.size));
              for (int _i510 = 0; 
                   (_map509.size < 0) ? iprot.peekMap() : (_i510 < _map509.size); 
                   ++_i510)
              {
                Set<Integer> _key511;
                int _val512;
                {
                  TSet _set513 = iprot.readSetBegin();
                  _key511 = new HashSet<Integer>(Math.max(0, 2*_set513.size));
                  for (int _i514 = 0; 
                       (_set513.size < 0) ? iprot.peekSet() : (_i514 < _set513.size); 
                       ++_i514)
                  {
                    int _elem515;
                    _elem515 = iprot.readI32();
                    _key511.add(_elem515);
                  }
                  iprot.readSetEnd();
                }
                _val512 = iprot.readI32();
                this.set_map.put(_key511, _val512);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map516 = iprot.readMapBegin();
              this.set_map_2 = new HashMap<Integer,Set<Integer>>(Math.max(0, 2*_map516.size));
              for (int _i517 = 0; 
                   (_map516.size < 0) ? iprot.peekMap() : (_i517 < _map516.size); 
                   ++_i517)
              {
                int _key518;
                Set<Integer> _val519;
                _key518 = iprot.readI32();
                {
                  TSet _set520 = iprot.readSetBegin();
                  _val519 = new HashSet<Integer>(Math.max(0, 2*_set520.size));
                  for (int _i521 = 0; 
                       (_set520.size < 0) ? iprot.peekSet() : (_i521 < _set520.size); 
                       ++_i521)
                  {
                    int _elem522;
                    _elem522 = iprot.readI32();
                    _val519.add(_elem522);
                  }
                  iprot.readSetEnd();
                }
                this.set_map_2.put(_key518, _val519);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map523 = iprot.readMapBegin();
              this.map_map = new HashMap<Map<Integer,Integer>,Integer>(Math.max(0, 2*_map523.size));
              for (int _i524 = 0; 
                   (_map523.size < 0) ? iprot.peekMap() : (_i524 < _map523.size); 
                   ++_i524)
              {
                Map<Integer,Integer> _key525;
                int _val526;
                {
                  TMap _map527 = iprot.readMapBegin();
                  _key525 = new HashMap<Integer,Integer>(Math.max(0, 2*_map527.size));
                  for (int _i528 = 0; 
                       (_map527.size < 0) ? iprot.peekMap() : (_i528 < _map527.size); 
                       ++_i528)
                  {
                    int _key529;
                    int _val530;
                    _key529 = iprot.readI32();
                    _val530 = iprot.readI32();
                    _key525.put(_key529, _val530);
                  }
                  iprot.readMapEnd();
                }
                _val526 = iprot.readI32();
                this.map_map.put(_key525, _val526);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_MAP_2:
          if (__field.type == TType.MAP) {
            {
              TMap _map531 = iprot.readMapBegin();
              this.map_map_2 = new HashMap<Integer,Map<Integer,Integer>>(Math.max(0, 2*_map531.size));
              for (int _i532 = 0; 
                   (_map531.size < 0) ? iprot.peekMap() : (_i532 < _map531.size); 
                   ++_i532)
              {
                int _key533;
                Map<Integer,Integer> _val534;
                _key533 = iprot.readI32();
                {
                  TMap _map535 = iprot.readMapBegin();
                  _val534 = new HashMap<Integer,Integer>(Math.max(0, 2*_map535.size));
                  for (int _i536 = 0; 
                       (_map535.size < 0) ? iprot.peekMap() : (_i536 < _map535.size); 
                       ++_i536)
                  {
                    int _key537;
                    int _val538;
                    _key537 = iprot.readI32();
                    _val538 = iprot.readI32();
                    _val534.put(_key537, _val538);
                  }
                  iprot.readMapEnd();
                }
                this.map_map_2.put(_key533, _val534);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_LIST_I32:
          if (__field.type == TType.LIST) {
            {
              TList _list539 = iprot.readListBegin();
              this.list_list_i32 = new ArrayList<List<Integer>>(Math.max(0, _list539.size));
              for (int _i540 = 0; 
                   (_list539.size < 0) ? iprot.peekList() : (_i540 < _list539.size); 
                   ++_i540)
              {
                List<Integer> _elem541;
                {
                  TList _list542 = iprot.readListBegin();
                  _elem541 = new ArrayList<Integer>(Math.max(0, _list542.size));
                  for (int _i543 = 0; 
                       (_list542.size < 0) ? iprot.peekList() : (_i543 < _list542.size); 
                       ++_i543)
                  {
                    int _elem544;
                    _elem544 = iprot.readI32();
                    _elem541.add(_elem544);
                  }
                  iprot.readListEnd();
                }
                this.list_list_i32.add(_elem541);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_LIST_STRUCT:
          if (__field.type == TType.LIST) {
            {
              TList _list545 = iprot.readListBegin();
              this.list_list_struct = new ArrayList<List<MyStruct>>(Math.max(0, _list545.size));
              for (int _i546 = 0; 
                   (_list545.size < 0) ? iprot.peekList() : (_i546 < _list545.size); 
                   ++_i546)
              {
                List<MyStruct> _elem547;
                {
                  TList _list548 = iprot.readListBegin();
                  _elem547 = new ArrayList<MyStruct>(Math.max(0, _list548.size));
                  for (int _i549 = 0; 
                       (_list548.size < 0) ? iprot.peekList() : (_i549 < _list548.size); 
                       ++_i549)
                  {
                    MyStruct _elem550;
                    _elem550 = new MyStruct();
                    _elem550.read(iprot);
                    _elem547.add(_elem550);
                  }
                  iprot.readListEnd();
                }
                this.list_list_struct.add(_elem547);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_SET_I32:
          if (__field.type == TType.LIST) {
            {
              TList _list551 = iprot.readListBegin();
              this.list_set_i32 = new ArrayList<Set<Integer>>(Math.max(0, _list551.size));
              for (int _i552 = 0; 
                   (_list551.size < 0) ? iprot.peekList() : (_i552 < _list551.size); 
                   ++_i552)
              {
                Set<Integer> _elem553;
                {
                  TSet _set554 = iprot.readSetBegin();
                  _elem553 = new HashSet<Integer>(Math.max(0, 2*_set554.size));
                  for (int _i555 = 0; 
                       (_set554.size < 0) ? iprot.peekSet() : (_i555 < _set554.size); 
                       ++_i555)
                  {
                    int _elem556;
                    _elem556 = iprot.readI32();
                    _elem553.add(_elem556);
                  }
                  iprot.readSetEnd();
                }
                this.list_set_i32.add(_elem553);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_SET_STRUCT:
          if (__field.type == TType.LIST) {
            {
              TList _list557 = iprot.readListBegin();
              this.list_set_struct = new ArrayList<Set<MyStruct>>(Math.max(0, _list557.size));
              for (int _i558 = 0; 
                   (_list557.size < 0) ? iprot.peekList() : (_i558 < _list557.size); 
                   ++_i558)
              {
                Set<MyStruct> _elem559;
                {
                  TSet _set560 = iprot.readSetBegin();
                  _elem559 = new HashSet<MyStruct>(Math.max(0, 2*_set560.size));
                  for (int _i561 = 0; 
                       (_set560.size < 0) ? iprot.peekSet() : (_i561 < _set560.size); 
                       ++_i561)
                  {
                    MyStruct _elem562;
                    _elem562 = new MyStruct();
                    _elem562.read(iprot);
                    _elem559.add(_elem562);
                  }
                  iprot.readSetEnd();
                }
                this.list_set_struct.add(_elem559);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP_I32_I32:
          if (__field.type == TType.LIST) {
            {
              TList _list563 = iprot.readListBegin();
              this.list_map_i32_i32 = new ArrayList<Map<Integer,Integer>>(Math.max(0, _list563.size));
              for (int _i564 = 0; 
                   (_list563.size < 0) ? iprot.peekList() : (_i564 < _list563.size); 
                   ++_i564)
              {
                Map<Integer,Integer> _elem565;
                {
                  TMap _map566 = iprot.readMapBegin();
                  _elem565 = new HashMap<Integer,Integer>(Math.max(0, 2*_map566.size));
                  for (int _i567 = 0; 
                       (_map566.size < 0) ? iprot.peekMap() : (_i567 < _map566.size); 
                       ++_i567)
                  {
                    int _key568;
                    int _val569;
                    _key568 = iprot.readI32();
                    _val569 = iprot.readI32();
                    _elem565.put(_key568, _val569);
                  }
                  iprot.readMapEnd();
                }
                this.list_map_i32_i32.add(_elem565);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP_I32_STRUCT:
          if (__field.type == TType.LIST) {
            {
              TList _list570 = iprot.readListBegin();
              this.list_map_i32_struct = new ArrayList<Map<Integer,MyStruct>>(Math.max(0, _list570.size));
              for (int _i571 = 0; 
                   (_list570.size < 0) ? iprot.peekList() : (_i571 < _list570.size); 
                   ++_i571)
              {
                Map<Integer,MyStruct> _elem572;
                {
                  TMap _map573 = iprot.readMapBegin();
                  _elem572 = new HashMap<Integer,MyStruct>(Math.max(0, 2*_map573.size));
                  for (int _i574 = 0; 
                       (_map573.size < 0) ? iprot.peekMap() : (_i574 < _map573.size); 
                       ++_i574)
                  {
                    int _key575;
                    MyStruct _val576;
                    _key575 = iprot.readI32();
                    _val576 = new MyStruct();
                    _val576.read(iprot);
                    _elem572.put(_key575, _val576);
                  }
                  iprot.readMapEnd();
                }
                this.list_map_i32_struct.add(_elem572);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LIST_MAP_STRUCT_I32:
          if (__field.type == TType.LIST) {
            {
              TList _list577 = iprot.readListBegin();
              this.list_map_struct_i32 = new ArrayList<Map<MyStruct,Integer>>(Math.max(0, _list577.size));
              for (int _i578 = 0; 
                   (_list577.size < 0) ? iprot.peekList() : (_i578 < _list577.size); 
                   ++_i578)
              {
                Map<MyStruct,Integer> _elem579;
                {
                  TMap _map580 = iprot.readMapBegin();
                  _elem579 = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map580.size));
                  for (int _i581 = 0; 
                       (_map580.size < 0) ? iprot.peekMap() : (_i581 < _map580.size); 
                       ++_i581)
                  {
                    MyStruct _key582;
                    int _val583;
                    _key582 = new MyStruct();
                    _key582.read(iprot);
                    _val583 = iprot.readI32();
                    _elem579.put(_key582, _val583);
                  }
                  iprot.readMapEnd();
                }
                this.list_map_struct_i32.add(_elem579);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_LIST_I32:
          if (__field.type == TType.SET) {
            {
              TSet _set584 = iprot.readSetBegin();
              this.set_list_i32 = new HashSet<List<Integer>>(Math.max(0, 2*_set584.size));
              for (int _i585 = 0; 
                   (_set584.size < 0) ? iprot.peekSet() : (_i585 < _set584.size); 
                   ++_i585)
              {
                List<Integer> _elem586;
                {
                  TList _list587 = iprot.readListBegin();
                  _elem586 = new ArrayList<Integer>(Math.max(0, _list587.size));
                  for (int _i588 = 0; 
                       (_list587.size < 0) ? iprot.peekList() : (_i588 < _list587.size); 
                       ++_i588)
                  {
                    int _elem589;
                    _elem589 = iprot.readI32();
                    _elem586.add(_elem589);
                  }
                  iprot.readListEnd();
                }
                this.set_list_i32.add(_elem586);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_LIST_STRUCT:
          if (__field.type == TType.SET) {
            {
              TSet _set590 = iprot.readSetBegin();
              this.set_list_struct = new HashSet<List<MyStruct>>(Math.max(0, 2*_set590.size));
              for (int _i591 = 0; 
                   (_set590.size < 0) ? iprot.peekSet() : (_i591 < _set590.size); 
                   ++_i591)
              {
                List<MyStruct> _elem592;
                {
                  TList _list593 = iprot.readListBegin();
                  _elem592 = new ArrayList<MyStruct>(Math.max(0, _list593.size));
                  for (int _i594 = 0; 
                       (_list593.size < 0) ? iprot.peekList() : (_i594 < _list593.size); 
                       ++_i594)
                  {
                    MyStruct _elem595;
                    _elem595 = new MyStruct();
                    _elem595.read(iprot);
                    _elem592.add(_elem595);
                  }
                  iprot.readListEnd();
                }
                this.set_list_struct.add(_elem592);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_SET_I32:
          if (__field.type == TType.SET) {
            {
              TSet _set596 = iprot.readSetBegin();
              this.set_set_i32 = new HashSet<Set<Integer>>(Math.max(0, 2*_set596.size));
              for (int _i597 = 0; 
                   (_set596.size < 0) ? iprot.peekSet() : (_i597 < _set596.size); 
                   ++_i597)
              {
                Set<Integer> _elem598;
                {
                  TSet _set599 = iprot.readSetBegin();
                  _elem598 = new HashSet<Integer>(Math.max(0, 2*_set599.size));
                  for (int _i600 = 0; 
                       (_set599.size < 0) ? iprot.peekSet() : (_i600 < _set599.size); 
                       ++_i600)
                  {
                    int _elem601;
                    _elem601 = iprot.readI32();
                    _elem598.add(_elem601);
                  }
                  iprot.readSetEnd();
                }
                this.set_set_i32.add(_elem598);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_SET_STRUCT:
          if (__field.type == TType.SET) {
            {
              TSet _set602 = iprot.readSetBegin();
              this.set_set_struct = new HashSet<Set<MyStruct>>(Math.max(0, 2*_set602.size));
              for (int _i603 = 0; 
                   (_set602.size < 0) ? iprot.peekSet() : (_i603 < _set602.size); 
                   ++_i603)
              {
                Set<MyStruct> _elem604;
                {
                  TSet _set605 = iprot.readSetBegin();
                  _elem604 = new HashSet<MyStruct>(Math.max(0, 2*_set605.size));
                  for (int _i606 = 0; 
                       (_set605.size < 0) ? iprot.peekSet() : (_i606 < _set605.size); 
                       ++_i606)
                  {
                    MyStruct _elem607;
                    _elem607 = new MyStruct();
                    _elem607.read(iprot);
                    _elem604.add(_elem607);
                  }
                  iprot.readSetEnd();
                }
                this.set_set_struct.add(_elem604);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP_I32_I32:
          if (__field.type == TType.SET) {
            {
              TSet _set608 = iprot.readSetBegin();
              this.set_map_i32_i32 = new HashSet<Map<Integer,Integer>>(Math.max(0, 2*_set608.size));
              for (int _i609 = 0; 
                   (_set608.size < 0) ? iprot.peekSet() : (_i609 < _set608.size); 
                   ++_i609)
              {
                Map<Integer,Integer> _elem610;
                {
                  TMap _map611 = iprot.readMapBegin();
                  _elem610 = new HashMap<Integer,Integer>(Math.max(0, 2*_map611.size));
                  for (int _i612 = 0; 
                       (_map611.size < 0) ? iprot.peekMap() : (_i612 < _map611.size); 
                       ++_i612)
                  {
                    int _key613;
                    int _val614;
                    _key613 = iprot.readI32();
                    _val614 = iprot.readI32();
                    _elem610.put(_key613, _val614);
                  }
                  iprot.readMapEnd();
                }
                this.set_map_i32_i32.add(_elem610);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP_I32_STRUCT:
          if (__field.type == TType.SET) {
            {
              TSet _set615 = iprot.readSetBegin();
              this.set_map_i32_struct = new HashSet<Map<Integer,MyStruct>>(Math.max(0, 2*_set615.size));
              for (int _i616 = 0; 
                   (_set615.size < 0) ? iprot.peekSet() : (_i616 < _set615.size); 
                   ++_i616)
              {
                Map<Integer,MyStruct> _elem617;
                {
                  TMap _map618 = iprot.readMapBegin();
                  _elem617 = new HashMap<Integer,MyStruct>(Math.max(0, 2*_map618.size));
                  for (int _i619 = 0; 
                       (_map618.size < 0) ? iprot.peekMap() : (_i619 < _map618.size); 
                       ++_i619)
                  {
                    int _key620;
                    MyStruct _val621;
                    _key620 = iprot.readI32();
                    _val621 = new MyStruct();
                    _val621.read(iprot);
                    _elem617.put(_key620, _val621);
                  }
                  iprot.readMapEnd();
                }
                this.set_map_i32_struct.add(_elem617);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SET_MAP_STRUCT_I32:
          if (__field.type == TType.SET) {
            {
              TSet _set622 = iprot.readSetBegin();
              this.set_map_struct_i32 = new HashSet<Map<MyStruct,Integer>>(Math.max(0, 2*_set622.size));
              for (int _i623 = 0; 
                   (_set622.size < 0) ? iprot.peekSet() : (_i623 < _set622.size); 
                   ++_i623)
              {
                Map<MyStruct,Integer> _elem624;
                {
                  TMap _map625 = iprot.readMapBegin();
                  _elem624 = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map625.size));
                  for (int _i626 = 0; 
                       (_map625.size < 0) ? iprot.peekMap() : (_i626 < _map625.size); 
                       ++_i626)
                  {
                    MyStruct _key627;
                    int _val628;
                    _key627 = new MyStruct();
                    _key627.read(iprot);
                    _val628 = iprot.readI32();
                    _elem624.put(_key627, _val628);
                  }
                  iprot.readMapEnd();
                }
                this.set_map_struct_i32.add(_elem624);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_I32_MAP_I32_I32:
          if (__field.type == TType.MAP) {
            {
              TMap _map629 = iprot.readMapBegin();
              this.map_i32_map_i32_i32 = new HashMap<Integer,Map<Integer,Integer>>(Math.max(0, 2*_map629.size));
              for (int _i630 = 0; 
                   (_map629.size < 0) ? iprot.peekMap() : (_i630 < _map629.size); 
                   ++_i630)
              {
                int _key631;
                Map<Integer,Integer> _val632;
                _key631 = iprot.readI32();
                {
                  TMap _map633 = iprot.readMapBegin();
                  _val632 = new HashMap<Integer,Integer>(Math.max(0, 2*_map633.size));
                  for (int _i634 = 0; 
                       (_map633.size < 0) ? iprot.peekMap() : (_i634 < _map633.size); 
                       ++_i634)
                  {
                    int _key635;
                    int _val636;
                    _key635 = iprot.readI32();
                    _val636 = iprot.readI32();
                    _val632.put(_key635, _val636);
                  }
                  iprot.readMapEnd();
                }
                this.map_i32_map_i32_i32.put(_key631, _val632);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_I32_MAP_STRUCT_I32:
          if (__field.type == TType.MAP) {
            {
              TMap _map637 = iprot.readMapBegin();
              this.map_i32_map_struct_i32 = new HashMap<Integer,Map<MyStruct,Integer>>(Math.max(0, 2*_map637.size));
              for (int _i638 = 0; 
                   (_map637.size < 0) ? iprot.peekMap() : (_i638 < _map637.size); 
                   ++_i638)
              {
                int _key639;
                Map<MyStruct,Integer> _val640;
                _key639 = iprot.readI32();
                {
                  TMap _map641 = iprot.readMapBegin();
                  _val640 = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map641.size));
                  for (int _i642 = 0; 
                       (_map641.size < 0) ? iprot.peekMap() : (_i642 < _map641.size); 
                       ++_i642)
                  {
                    MyStruct _key643;
                    int _val644;
                    _key643 = new MyStruct();
                    _key643.read(iprot);
                    _val644 = iprot.readI32();
                    _val640.put(_key643, _val644);
                  }
                  iprot.readMapEnd();
                }
                this.map_i32_map_struct_i32.put(_key639, _val640);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_I32_MAP_I32_STRUCT:
          if (__field.type == TType.MAP) {
            {
              TMap _map645 = iprot.readMapBegin();
              this.map_i32_map_i32_struct = new HashMap<Integer,Map<Integer,MyStruct>>(Math.max(0, 2*_map645.size));
              for (int _i646 = 0; 
                   (_map645.size < 0) ? iprot.peekMap() : (_i646 < _map645.size); 
                   ++_i646)
              {
                int _key647;
                Map<Integer,MyStruct> _val648;
                _key647 = iprot.readI32();
                {
                  TMap _map649 = iprot.readMapBegin();
                  _val648 = new HashMap<Integer,MyStruct>(Math.max(0, 2*_map649.size));
                  for (int _i650 = 0; 
                       (_map649.size < 0) ? iprot.peekMap() : (_i650 < _map649.size); 
                       ++_i650)
                  {
                    int _key651;
                    MyStruct _val652;
                    _key651 = iprot.readI32();
                    _val652 = new MyStruct();
                    _val652.read(iprot);
                    _val648.put(_key651, _val652);
                  }
                  iprot.readMapEnd();
                }
                this.map_i32_map_i32_struct.put(_key647, _val648);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_I32_MAP_LIST_I32_I32:
          if (__field.type == TType.MAP) {
            {
              TMap _map653 = iprot.readMapBegin();
              this.map_i32_map_list_i32_i32 = new HashMap<Integer,List<Map<Integer,Integer>>>(Math.max(0, 2*_map653.size));
              for (int _i654 = 0; 
                   (_map653.size < 0) ? iprot.peekMap() : (_i654 < _map653.size); 
                   ++_i654)
              {
                int _key655;
                List<Map<Integer,Integer>> _val656;
                _key655 = iprot.readI32();
                {
                  TList _list657 = iprot.readListBegin();
                  _val656 = new ArrayList<Map<Integer,Integer>>(Math.max(0, _list657.size));
                  for (int _i658 = 0; 
                       (_list657.size < 0) ? iprot.peekList() : (_i658 < _list657.size); 
                       ++_i658)
                  {
                    Map<Integer,Integer> _elem659;
                    {
                      TMap _map660 = iprot.readMapBegin();
                      _elem659 = new HashMap<Integer,Integer>(Math.max(0, 2*_map660.size));
                      for (int _i661 = 0; 
                           (_map660.size < 0) ? iprot.peekMap() : (_i661 < _map660.size); 
                           ++_i661)
                      {
                        int _key662;
                        int _val663;
                        _key662 = iprot.readI32();
                        _val663 = iprot.readI32();
                        _elem659.put(_key662, _val663);
                      }
                      iprot.readMapEnd();
                    }
                    _val656.add(_elem659);
                  }
                  iprot.readListEnd();
                }
                this.map_i32_map_list_i32_i32.put(_key655, _val656);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAP_I32_MAP_LIST_STRUCT_I32:
          if (__field.type == TType.MAP) {
            {
              TMap _map664 = iprot.readMapBegin();
              this.map_i32_map_list_struct_i32 = new HashMap<Integer,List<Map<MyStruct,Integer>>>(Math.max(0, 2*_map664.size));
              for (int _i665 = 0; 
                   (_map664.size < 0) ? iprot.peekMap() : (_i665 < _map664.size); 
                   ++_i665)
              {
                int _key666;
                List<Map<MyStruct,Integer>> _val667;
                _key666 = iprot.readI32();
                {
                  TList _list668 = iprot.readListBegin();
                  _val667 = new ArrayList<Map<MyStruct,Integer>>(Math.max(0, _list668.size));
                  for (int _i669 = 0; 
                       (_list668.size < 0) ? iprot.peekList() : (_i669 < _list668.size); 
                       ++_i669)
                  {
                    Map<MyStruct,Integer> _elem670;
                    {
                      TMap _map671 = iprot.readMapBegin();
                      _elem670 = new HashMap<MyStruct,Integer>(Math.max(0, 2*_map671.size));
                      for (int _i672 = 0; 
                           (_map671.size < 0) ? iprot.peekMap() : (_i672 < _map671.size); 
                           ++_i672)
                      {
                        MyStruct _key673;
                        int _val674;
                        _key673 = new MyStruct();
                        _key673.read(iprot);
                        _val674 = iprot.readI32();
                        _elem670.put(_key673, _val674);
                      }
                      iprot.readMapEnd();
                    }
                    _val667.add(_elem670);
                  }
                  iprot.readListEnd();
                }
                this.map_i32_map_list_struct_i32.put(_key666, _val667);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.struct_list != null) {
      oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.struct_list.size()));
        for (MyStruct _iter675 : this.struct_list)        {
          _iter675.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_list != null) {
      oprot.writeFieldBegin(UNION_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.union_list.size()));
        for (MyUnion _iter676 : this.union_list)        {
          _iter676.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_list != null) {
      oprot.writeFieldBegin(ENUM_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.enum_list.size()));
        for (MyEnum _iter677 : this.enum_list)        {
          oprot.writeI32(_iter677 == null ? 0 : _iter677.getValue());
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_set != null) {
      oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.struct_set.size()));
        for (MyStruct _iter678 : this.struct_set)        {
          _iter678.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_set != null) {
      oprot.writeFieldBegin(UNION_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.union_set.size()));
        for (MyUnion _iter679 : this.union_set)        {
          _iter679.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_set != null) {
      oprot.writeFieldBegin(ENUM_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.enum_set.size()));
        for (MyEnum _iter680 : this.enum_set)        {
          oprot.writeI32(_iter680 == null ? 0 : _iter680.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_map != null) {
      oprot.writeFieldBegin(STRUCT_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, this.struct_map.size()));
        for (Map.Entry<MyStruct, Long> _iter681 : this.struct_map.entrySet())        {
          _iter681.getKey().write(oprot);
          oprot.writeI64(_iter681.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_map != null) {
      oprot.writeFieldBegin(UNION_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I64, this.union_map.size()));
        for (Map.Entry<MyUnion, Long> _iter682 : this.union_map.entrySet())        {
          _iter682.getKey().write(oprot);
          oprot.writeI64(_iter682.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_map != null) {
      oprot.writeFieldBegin(ENUM_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I64, this.enum_map.size()));
        for (Map.Entry<MyEnum, Long> _iter683 : this.enum_map.entrySet())        {
          oprot.writeI32(_iter683.getKey() == null ? 0 : _iter683.getKey().getValue());
          oprot.writeI64(_iter683.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_map_2 != null) {
      oprot.writeFieldBegin(STRUCT_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.struct_map_2.size()));
        for (Map.Entry<Integer, MyStruct> _iter684 : this.struct_map_2.entrySet())        {
          oprot.writeI32(_iter684.getKey());
          _iter684.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.union_map_2 != null) {
      oprot.writeFieldBegin(UNION_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.union_map_2.size()));
        for (Map.Entry<Integer, MyUnion> _iter685 : this.union_map_2.entrySet())        {
          oprot.writeI32(_iter685.getKey());
          _iter685.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.enum_map_2 != null) {
      oprot.writeFieldBegin(ENUM_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I32, this.enum_map_2.size()));
        for (Map.Entry<Integer, MyEnum> _iter686 : this.enum_map_2.entrySet())        {
          oprot.writeI32(_iter686.getKey());
          oprot.writeI32(_iter686.getValue() == null ? 0 : _iter686.getValue().getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map != null) {
      oprot.writeFieldBegin(LIST_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.I32, this.list_map.size()));
        for (Map.Entry<List<Integer>, Integer> _iter687 : this.list_map.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter687.getKey().size()));
            for (int _iter688 : _iter687.getKey())            {
              oprot.writeI32(_iter688);
            }
            oprot.writeListEnd();
          }
          oprot.writeI32(_iter687.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map_2 != null) {
      oprot.writeFieldBegin(LIST_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.list_map_2.size()));
        for (Map.Entry<Integer, List<Integer>> _iter689 : this.list_map_2.entrySet())        {
          oprot.writeI32(_iter689.getKey());
          {
            oprot.writeListBegin(new TList(TType.I32, _iter689.getValue().size()));
            for (int _iter690 : _iter689.getValue())            {
              oprot.writeI32(_iter690);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map != null) {
      oprot.writeFieldBegin(SET_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.I32, this.set_map.size()));
        for (Map.Entry<Set<Integer>, Integer> _iter691 : this.set_map.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter691.getKey().size()));
            for (int _iter692 : _iter691.getKey())            {
              oprot.writeI32(_iter692);
            }
            oprot.writeSetEnd();
          }
          oprot.writeI32(_iter691.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map_2 != null) {
      oprot.writeFieldBegin(SET_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.SET, this.set_map_2.size()));
        for (Map.Entry<Integer, Set<Integer>> _iter693 : this.set_map_2.entrySet())        {
          oprot.writeI32(_iter693.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter693.getValue().size()));
            for (int _iter694 : _iter693.getValue())            {
              oprot.writeI32(_iter694);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_map != null) {
      oprot.writeFieldBegin(MAP_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.I32, this.map_map.size()));
        for (Map.Entry<Map<Integer,Integer>, Integer> _iter695 : this.map_map.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter695.getKey().size()));
            for (Map.Entry<Integer, Integer> _iter696 : _iter695.getKey().entrySet())            {
              oprot.writeI32(_iter696.getKey());
              oprot.writeI32(_iter696.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeI32(_iter695.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_map_2 != null) {
      oprot.writeFieldBegin(MAP_MAP_2_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, this.map_map_2.size()));
        for (Map.Entry<Integer, Map<Integer,Integer>> _iter697 : this.map_map_2.entrySet())        {
          oprot.writeI32(_iter697.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter697.getValue().size()));
            for (Map.Entry<Integer, Integer> _iter698 : _iter697.getValue().entrySet())            {
              oprot.writeI32(_iter698.getKey());
              oprot.writeI32(_iter698.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_list_i32 != null) {
      oprot.writeFieldBegin(LIST_LIST_I32_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.list_list_i32.size()));
        for (List<Integer> _iter699 : this.list_list_i32)        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter699.size()));
            for (int _iter700 : _iter699)            {
              oprot.writeI32(_iter700);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_list_struct != null) {
      oprot.writeFieldBegin(LIST_LIST_STRUCT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.list_list_struct.size()));
        for (List<MyStruct> _iter701 : this.list_list_struct)        {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter701.size()));
            for (MyStruct _iter702 : _iter701)            {
              _iter702.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_set_i32 != null) {
      oprot.writeFieldBegin(LIST_SET_I32_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.SET, this.list_set_i32.size()));
        for (Set<Integer> _iter703 : this.list_set_i32)        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter703.size()));
            for (int _iter704 : _iter703)            {
              oprot.writeI32(_iter704);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_set_struct != null) {
      oprot.writeFieldBegin(LIST_SET_STRUCT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.SET, this.list_set_struct.size()));
        for (Set<MyStruct> _iter705 : this.list_set_struct)        {
          {
            oprot.writeSetBegin(new TSet(TType.STRUCT, _iter705.size()));
            for (MyStruct _iter706 : _iter705)            {
              _iter706.write(oprot);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map_i32_i32 != null) {
      oprot.writeFieldBegin(LIST_MAP_I32_I32_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.list_map_i32_i32.size()));
        for (Map<Integer,Integer> _iter707 : this.list_map_i32_i32)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter707.size()));
            for (Map.Entry<Integer, Integer> _iter708 : _iter707.entrySet())            {
              oprot.writeI32(_iter708.getKey());
              oprot.writeI32(_iter708.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map_i32_struct != null) {
      oprot.writeFieldBegin(LIST_MAP_I32_STRUCT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.list_map_i32_struct.size()));
        for (Map<Integer,MyStruct> _iter709 : this.list_map_i32_struct)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, _iter709.size()));
            for (Map.Entry<Integer, MyStruct> _iter710 : _iter709.entrySet())            {
              oprot.writeI32(_iter710.getKey());
              _iter710.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_map_struct_i32 != null) {
      oprot.writeFieldBegin(LIST_MAP_STRUCT_I32_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.list_map_struct_i32.size()));
        for (Map<MyStruct,Integer> _iter711 : this.list_map_struct_i32)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, _iter711.size()));
            for (Map.Entry<MyStruct, Integer> _iter712 : _iter711.entrySet())            {
              _iter712.getKey().write(oprot);
              oprot.writeI32(_iter712.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_list_i32 != null) {
      oprot.writeFieldBegin(SET_LIST_I32_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.LIST, this.set_list_i32.size()));
        for (List<Integer> _iter713 : this.set_list_i32)        {
          {
            oprot.writeListBegin(new TList(TType.I32, _iter713.size()));
            for (int _iter714 : _iter713)            {
              oprot.writeI32(_iter714);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_list_struct != null) {
      oprot.writeFieldBegin(SET_LIST_STRUCT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.LIST, this.set_list_struct.size()));
        for (List<MyStruct> _iter715 : this.set_list_struct)        {
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter715.size()));
            for (MyStruct _iter716 : _iter715)            {
              _iter716.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_set_i32 != null) {
      oprot.writeFieldBegin(SET_SET_I32_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.set_set_i32.size()));
        for (Set<Integer> _iter717 : this.set_set_i32)        {
          {
            oprot.writeSetBegin(new TSet(TType.I32, _iter717.size()));
            for (int _iter718 : _iter717)            {
              oprot.writeI32(_iter718);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_set_struct != null) {
      oprot.writeFieldBegin(SET_SET_STRUCT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.SET, this.set_set_struct.size()));
        for (Set<MyStruct> _iter719 : this.set_set_struct)        {
          {
            oprot.writeSetBegin(new TSet(TType.STRUCT, _iter719.size()));
            for (MyStruct _iter720 : _iter719)            {
              _iter720.write(oprot);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map_i32_i32 != null) {
      oprot.writeFieldBegin(SET_MAP_I32_I32_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.MAP, this.set_map_i32_i32.size()));
        for (Map<Integer,Integer> _iter721 : this.set_map_i32_i32)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter721.size()));
            for (Map.Entry<Integer, Integer> _iter722 : _iter721.entrySet())            {
              oprot.writeI32(_iter722.getKey());
              oprot.writeI32(_iter722.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map_i32_struct != null) {
      oprot.writeFieldBegin(SET_MAP_I32_STRUCT_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.MAP, this.set_map_i32_struct.size()));
        for (Map<Integer,MyStruct> _iter723 : this.set_map_i32_struct)        {
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, _iter723.size()));
            for (Map.Entry<Integer, MyStruct> _iter724 : _iter723.entrySet())            {
              oprot.writeI32(_iter724.getKey());
              _iter724.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_map_struct_i32 != null) {
      oprot.writeFieldBegin(SET_MAP_STRUCT_I32_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.MAP, this.set_map_struct_i32.size()));
        for (Map<MyStruct,Integer> _iter725 : this.set_map_struct_i32)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, _iter725.size()));
            for (Map.Entry<MyStruct, Integer> _iter726 : _iter725.entrySet())            {
              _iter726.getKey().write(oprot);
              oprot.writeI32(_iter726.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_i32_map_i32_i32 != null) {
      oprot.writeFieldBegin(MAP_I32_MAP_I32_I32_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, this.map_i32_map_i32_i32.size()));
        for (Map.Entry<Integer, Map<Integer,Integer>> _iter727 : this.map_i32_map_i32_i32.entrySet())        {
          oprot.writeI32(_iter727.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter727.getValue().size()));
            for (Map.Entry<Integer, Integer> _iter728 : _iter727.getValue().entrySet())            {
              oprot.writeI32(_iter728.getKey());
              oprot.writeI32(_iter728.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_i32_map_struct_i32 != null) {
      oprot.writeFieldBegin(MAP_I32_MAP_STRUCT_I32_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, this.map_i32_map_struct_i32.size()));
        for (Map.Entry<Integer, Map<MyStruct,Integer>> _iter729 : this.map_i32_map_struct_i32.entrySet())        {
          oprot.writeI32(_iter729.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, _iter729.getValue().size()));
            for (Map.Entry<MyStruct, Integer> _iter730 : _iter729.getValue().entrySet())            {
              _iter730.getKey().write(oprot);
              oprot.writeI32(_iter730.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_i32_map_i32_struct != null) {
      oprot.writeFieldBegin(MAP_I32_MAP_I32_STRUCT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, this.map_i32_map_i32_struct.size()));
        for (Map.Entry<Integer, Map<Integer,MyStruct>> _iter731 : this.map_i32_map_i32_struct.entrySet())        {
          oprot.writeI32(_iter731.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, _iter731.getValue().size()));
            for (Map.Entry<Integer, MyStruct> _iter732 : _iter731.getValue().entrySet())            {
              oprot.writeI32(_iter732.getKey());
              _iter732.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_i32_map_list_i32_i32 != null) {
      oprot.writeFieldBegin(MAP_I32_MAP_LIST_I32_I32_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.map_i32_map_list_i32_i32.size()));
        for (Map.Entry<Integer, List<Map<Integer,Integer>>> _iter733 : this.map_i32_map_list_i32_i32.entrySet())        {
          oprot.writeI32(_iter733.getKey());
          {
            oprot.writeListBegin(new TList(TType.MAP, _iter733.getValue().size()));
            for (Map<Integer,Integer> _iter734 : _iter733.getValue())            {
              {
                oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter734.size()));
                for (Map.Entry<Integer, Integer> _iter735 : _iter734.entrySet())                {
                  oprot.writeI32(_iter735.getKey());
                  oprot.writeI32(_iter735.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_i32_map_list_struct_i32 != null) {
      oprot.writeFieldBegin(MAP_I32_MAP_LIST_STRUCT_I32_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, this.map_i32_map_list_struct_i32.size()));
        for (Map.Entry<Integer, List<Map<MyStruct,Integer>>> _iter736 : this.map_i32_map_list_struct_i32.entrySet())        {
          oprot.writeI32(_iter736.getKey());
          {
            oprot.writeListBegin(new TList(TType.MAP, _iter736.getValue().size()));
            for (Map<MyStruct,Integer> _iter737 : _iter736.getValue())            {
              {
                oprot.writeMapBegin(new TMap(TType.STRUCT, TType.I32, _iter737.size()));
                for (Map.Entry<MyStruct, Integer> _iter738 : _iter737.entrySet())                {
                  _iter738.getKey().write(oprot);
                  oprot.writeI32(_iter738.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Containers");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("struct_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStruct_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStruct_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("union_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnion_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnion_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("enum_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getEnum_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getEnum_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_map_2");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_map_2() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_map_2(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_list_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_list_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_list_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_list_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_list_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_list_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_set_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_set_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_set_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_set_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_set_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_set_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map_i32_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map_i32_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map_i32_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map_i32_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map_i32_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map_i32_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_map_struct_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getList_map_struct_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getList_map_struct_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_list_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_list_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_list_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_list_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_list_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_list_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_set_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_set_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_set_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_set_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_set_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_set_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map_i32_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map_i32_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map_i32_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map_i32_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map_i32_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map_i32_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_map_struct_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getSet_map_struct_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getSet_map_struct_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_i32_map_i32_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_i32_map_i32_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_i32_map_i32_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_i32_map_struct_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_i32_map_struct_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_i32_map_struct_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_i32_map_i32_struct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_i32_map_i32_struct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_i32_map_i32_struct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_i32_map_list_i32_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_i32_map_list_i32_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_i32_map_list_i32_i32(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_i32_map_list_struct_i32");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMap_i32_map_list_struct_i32() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMap_i32_map_list_struct_i32(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

