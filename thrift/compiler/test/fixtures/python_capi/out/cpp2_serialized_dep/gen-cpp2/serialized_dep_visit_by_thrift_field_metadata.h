/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::test::fixtures::python_capi::SerializedStruct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).s_ref());
    case 2:
      return f(1, static_cast<T&&>(t).i_ref());
    case 3:
      return f(2, static_cast<T&&>(t).os_ref());
    case 4:
      return f(3, static_cast<T&&>(t).rs_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::SerializedStruct");
    }
  }
};

template <>
struct VisitByFieldId<::test::fixtures::python_capi::SerializedUnion> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).s_ref());
    case 2:
      return f(1, static_cast<T&&>(t).i_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::SerializedUnion");
    }
  }
};

template <>
struct VisitByFieldId<::test::fixtures::python_capi::SerializedError> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).msg_ref());
    case 2:
      return f(1, static_cast<T&&>(t).os_ref());
    case 3:
      return f(2, static_cast<T&&>(t).rs_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::SerializedError");
    }
  }
};

template <>
struct VisitByFieldId<::test::fixtures::python_capi::MarshalStruct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).s_ref());
    case 2:
      return f(1, static_cast<T&&>(t).i_ref());
    case 3:
      return f(2, static_cast<T&&>(t).os_ref());
    case 4:
      return f(3, static_cast<T&&>(t).rs_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::MarshalStruct");
    }
  }
};

template <>
struct VisitByFieldId<::test::fixtures::python_capi::MarshalUnion> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).s_ref());
    case 2:
      return f(1, static_cast<T&&>(t).i_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::MarshalUnion");
    }
  }
};

template <>
struct VisitByFieldId<::test::fixtures::python_capi::MarshalError> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).msg_ref());
    case 2:
      return f(1, static_cast<T&&>(t).os_ref());
    case 3:
      return f(2, static_cast<T&&>(t).rs_ref());
    default:
      throwInvalidThriftId(fieldId, "::test::fixtures::python_capi::MarshalError");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
