/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::test::fixtures::python_capi::SerializedUnion> {

  template <typename F, typename T>
  decltype(auto) operator()([[maybe_unused]] F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::s:
      return f(0, *static_cast<T&&>(t).s_ref());
    case Union::Type::i:
      return f(1, *static_cast<T&&>(t).i_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).s_ref()))();
    }
  }
};
template <>
struct VisitUnion<::test::fixtures::python_capi::MarshalUnion> {

  template <typename F, typename T>
  decltype(auto) operator()([[maybe_unused]] F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::s:
      return f(0, *static_cast<T&&>(t).s_ref());
    case Union::Type::i:
      return f(1, *static_cast<T&&>(t).i_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).s_ref()))();
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
