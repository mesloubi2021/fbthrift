/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::test::fixtures::python_capi::SerializedStruct> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).s_ref()...);
    f(1, static_cast<T&&>(t).i_ref()...);
    f(2, static_cast<T&&>(t).os_ref()...);
    f(3, static_cast<T&&>(t).rs_ref()...);
  }
};

template <>
struct ForEachField<::test::fixtures::python_capi::SerializedUnion> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).s_ref()...);
    f(1, static_cast<T&&>(t).i_ref()...);
  }
};

template <>
struct ForEachField<::test::fixtures::python_capi::SerializedError> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).msg_ref()...);
    f(1, static_cast<T&&>(t).os_ref()...);
    f(2, static_cast<T&&>(t).rs_ref()...);
  }
};

template <>
struct ForEachField<::test::fixtures::python_capi::MarshalStruct> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).s_ref()...);
    f(1, static_cast<T&&>(t).i_ref()...);
    f(2, static_cast<T&&>(t).os_ref()...);
    f(3, static_cast<T&&>(t).rs_ref()...);
  }
};

template <>
struct ForEachField<::test::fixtures::python_capi::MarshalUnion> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).s_ref()...);
    f(1, static_cast<T&&>(t).i_ref()...);
  }
};

template <>
struct ForEachField<::test::fixtures::python_capi::MarshalError> {
  template <typename F, typename... T>
  void operator()([[maybe_unused]] F&& f, [[maybe_unused]] T&&... t) const {
    f(0, static_cast<T&&>(t).msg_ref()...);
    f(1, static_cast<T&&>(t).os_ref()...);
    f(2, static_cast<T&&>(t).rs_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
