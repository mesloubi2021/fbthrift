#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import apache.thrift.metadata.thrift_types as _fbthrift_metadata

import test.fixtures.enums.module.thrift_enums as _fbthrift_current_module_enums
import test.fixtures.enums.module.thrift_enums


# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_SomeStruct(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.SomeStruct"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.Metasyntactic")), name="reasonable", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.Metasyntactic")), name="fine", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=3, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.Metasyntactic")), name="questionable", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=4, type=_fbthrift_metadata.ThriftType(t_set=_fbthrift_metadata.ThriftSetType(valueType=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I32_TYPE))), name="tags", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # reasonable
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_Metasyntactic(new_struct)    # fine
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_Metasyntactic(new_struct)    # questionable
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_Metasyntactic(new_struct)    # tags
    
    return new_struct
def gen_metadata_struct_SomeStruct() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_SomeStruct(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct_MyStruct(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "module.MyStruct"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.MyEnum2")), name="me2_3", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.MyEnum3")), name="me3_n3", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=4, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.MyEnum1")), name="me1_t1", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=6, type=_fbthrift_metadata.ThriftType(t_enum=_fbthrift_metadata.ThriftEnumType(name="module.MyEnum1")), name="me1_t2", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
        ])
    new_struct = metadata_struct(structs=struct_dict)

    # me2_3
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_MyEnum2(new_struct)    # me3_n3
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_MyEnum3(new_struct)    # me1_t1
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_MyEnum1(new_struct)    # me1_t2
    new_struct = test.fixtures.enums.module.thrift_enums._fbthrift_gen_metadata_enum_MyEnum1(new_struct)
    return new_struct
def gen_metadata_struct_MyStruct() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct_MyStruct(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))



def getThriftModuleMetadata() -> _fbthrift_metadata.ThriftMetadata:
    meta = _fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={})
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_Metasyntactic(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyEnum1(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyEnum2(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyEnum3(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyEnum4(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyBitmaskEnum1(meta)
    meta = _fbthrift_current_module_enums._fbthrift_gen_metadata_enum_MyBitmaskEnum2(meta)
    meta = _fbthrift_gen_metadata_struct_SomeStruct(meta)
    meta = _fbthrift_gen_metadata_struct_MyStruct(meta)
    return meta
