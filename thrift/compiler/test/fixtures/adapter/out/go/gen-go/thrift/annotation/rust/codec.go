// Autogenerated by Thrift for thrift/annotation/rust.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package rust


import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO

// Premade codec specs
var (
    premadeCodecTypeSpec_string = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "string",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
},

        }
    }()
    premadeCodecTypeSpec_rust_Name = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Name",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Name",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewName() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Copy = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Copy",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Copy",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewCopy() },
},

        }
    }()
    premadeCodecTypeSpec_rust_RequestContext = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.RequestContext",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.RequestContext",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewRequestContext() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Arc = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Arc",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Arc",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewArc() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Box = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Box",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Box",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewBox() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Exhaustive = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Exhaustive",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Exhaustive",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewExhaustive() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Ord = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Ord",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Ord",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewOrd() },
},

        }
    }()
    premadeCodecTypeSpec_rust_NewType = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.NewType",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.NewType",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewNewType_() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Type = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Type",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Type",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewType() },
},

        }
    }()
    premadeCodecTypeSpec_bool = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "bool",
            CodecPrimitiveSpec: &thrift.CodecPrimitiveSpec{
    PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_BOOL,
},

        }
    }()
    premadeCodecTypeSpec_rust_Serde = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Serde",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Serde",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewSerde() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Mod = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Mod",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Mod",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewMod() },
},

        }
    }()
    premadeCodecTypeSpec_rust_Adapter = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Adapter",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Adapter",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewAdapter() },
},

        }
    }()
    premadeCodecTypeSpec_list_string = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "list<string>",
            CodecListSpec: &thrift.CodecListSpec{
    ElementWireType: thrift.STRING,
	ElementTypeSpec: premadeCodecTypeSpec_string,
},

        }
    }()
    premadeCodecTypeSpec_rust_Derive = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.Derive",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.Derive",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewDerive() },
},

        }
    }()
    premadeCodecTypeSpec_rust_ServiceExn = func() *thrift.TypeSpec {
        return &thrift.TypeSpec{
            FullName: "rust.ServiceExn",
            CodecStructSpec: &thrift.CodecStructSpec{
    ScopedName: "rust.ServiceExn",
    IsUnion:    false,
    NewFunc:    func() thrift.Struct { return NewServiceExn() },
},

        }
    }()
)

// Premade struct specs
var (
    premadeStructSpec_Name = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Name",
    ScopedName:           "rust.Name",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    }()
    premadeStructSpec_Copy = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Copy",
    ScopedName:           "rust.Copy",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_RequestContext = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "RequestContext",
    ScopedName:           "rust.RequestContext",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_Arc = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Arc",
    ScopedName:           "rust.Arc",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_Box = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Box",
    ScopedName:           "rust.Box",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_Exhaustive = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Exhaustive",
    ScopedName:           "rust.Exhaustive",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_Ord = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Ord",
    ScopedName:           "rust.Ord",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_NewType = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "NewType",
    ScopedName:           "rust.NewType",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
    },
    FieldSpecIDToIndex:   map[int16]int{
    },
    FieldSpecNameToIndex: map[string]int{
    },
}
    }()
    premadeStructSpec_Type = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Type",
    ScopedName:           "rust.Type",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    }()
    premadeStructSpec_Serde = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Serde",
    ScopedName:           "rust.Serde",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.BOOL,
            Name:                 "enabled",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_bool,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "enabled": 0,
    },
}
    }()
    premadeStructSpec_Mod = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Mod",
    ScopedName:           "rust.Mod",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    }()
    premadeStructSpec_Adapter = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Adapter",
    ScopedName:           "rust.Adapter",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.STRING,
            Name:                 "name",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "name": 0,
    },
}
    }()
    premadeStructSpec_Derive = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "Derive",
    ScopedName:           "rust.Derive",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.LIST,
            Name:                 "derives",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_list_string,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "derives": 0,
    },
}
    }()
    premadeStructSpec_ServiceExn = func() *thrift.StructSpec {
        return &thrift.StructSpec{
    Name:                 "ServiceExn",
    ScopedName:           "rust.ServiceExn",
    IsUnion:              false,
    IsException:          false,
    FieldSpecs:           []thrift.FieldSpec{
        {
            ID:                   1,
            WireType:             thrift.BOOL,
            Name:                 "anyhow_to_application_exn",
            ReflectIndex:         0,
            IsOptional:           false,
            ValueTypeSpec:        premadeCodecTypeSpec_bool,
            MustBeSetToSerialize: false,
        },    },
    FieldSpecIDToIndex:   map[int16]int{
        1: 0,
    },
    FieldSpecNameToIndex: map[string]int{
        "anyhow_to_application_exn": 0,
    },
}
    }()
)

// Premade slice of all struct specs
var premadeStructSpecs = func() []*thrift.StructSpec {
    fbthriftResults := make([]*thrift.StructSpec, 0)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Name)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Copy)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_RequestContext)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Arc)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Box)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Exhaustive)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Ord)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_NewType)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Type)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Serde)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Mod)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Adapter)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_Derive)
    fbthriftResults = append(fbthriftResults, premadeStructSpec_ServiceExn)
    return fbthriftResults
}()

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Name.FullName] = premadeCodecTypeSpec_rust_Name
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Copy.FullName] = premadeCodecTypeSpec_rust_Copy
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_RequestContext.FullName] = premadeCodecTypeSpec_rust_RequestContext
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Arc.FullName] = premadeCodecTypeSpec_rust_Arc
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Box.FullName] = premadeCodecTypeSpec_rust_Box
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Exhaustive.FullName] = premadeCodecTypeSpec_rust_Exhaustive
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Ord.FullName] = premadeCodecTypeSpec_rust_Ord
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_NewType.FullName] = premadeCodecTypeSpec_rust_NewType
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Type.FullName] = premadeCodecTypeSpec_rust_Type
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_bool.FullName] = premadeCodecTypeSpec_bool
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Serde.FullName] = premadeCodecTypeSpec_rust_Serde
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Mod.FullName] = premadeCodecTypeSpec_rust_Mod
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Adapter.FullName] = premadeCodecTypeSpec_rust_Adapter
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_Derive.FullName] = premadeCodecTypeSpec_rust_Derive
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_rust_ServiceExn.FullName] = premadeCodecTypeSpec_rust_ServiceExn
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
