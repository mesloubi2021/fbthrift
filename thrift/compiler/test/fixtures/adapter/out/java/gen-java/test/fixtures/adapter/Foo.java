/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.adapter;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="Foo", builder=Foo.Builder.class)
public final class Foo implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public Foo(
        @com.facebook.swift.codec.ThriftField(value=1, name="intField", requiredness=Requiredness.NONE) final int intField,
        @com.facebook.swift.codec.ThriftField(value=2, name="optionalIntField", requiredness=Requiredness.OPTIONAL) final Integer optionalIntField,
        @com.facebook.swift.codec.ThriftField(value=3, name="intFieldWithDefault", requiredness=Requiredness.NONE) final int intFieldWithDefault,
        @com.facebook.swift.codec.ThriftField(value=4, name="setField", requiredness=Requiredness.NONE) final Set<String> setField,
        @com.facebook.swift.codec.ThriftField(value=5, name="optionalSetField", requiredness=Requiredness.OPTIONAL) final Set<String> optionalSetField,
        @com.facebook.swift.codec.ThriftField(value=6, name="mapField", requiredness=Requiredness.NONE) final Map<String, List<String>> mapField,
        @com.facebook.swift.codec.ThriftField(value=7, name="optionalMapField", requiredness=Requiredness.OPTIONAL) final Map<String, List<String>> optionalMapField,
        @com.facebook.swift.codec.ThriftField(value=8, name="binaryField", requiredness=Requiredness.NONE) final byte[] binaryField,
        @com.facebook.swift.codec.ThriftField(value=9, name="longField", requiredness=Requiredness.NONE) final long longField,
        @com.facebook.swift.codec.ThriftField(value=10, name="adaptedLongField", requiredness=Requiredness.NONE) final long adaptedLongField,
        @com.facebook.swift.codec.ThriftField(value=11, name="doubleAdaptedField", requiredness=Requiredness.NONE) final long doubleAdaptedField,
        @com.facebook.swift.codec.ThriftField(value=12, name="adapted_list", requiredness=Requiredness.NONE) final List<Integer> adaptedList,
        @com.facebook.swift.codec.ThriftField(value=13, name="adapted_set", requiredness=Requiredness.NONE) final Set<Integer> adaptedSet,
        @com.facebook.swift.codec.ThriftField(value=14, name="adapted_map", requiredness=Requiredness.NONE) final Map<String, Integer> adaptedMap,
        @com.facebook.swift.codec.ThriftField(value=15, name="adapted_list_nested", requiredness=Requiredness.NONE) final List<List<Map<Integer, Integer>>> adaptedListNested
    ) {
        this.intField = intField;
        this.optionalIntField = optionalIntField;
        this.intFieldWithDefault = intFieldWithDefault;
        this.setField = setField;
        this.optionalSetField = optionalSetField;
        this.mapField = mapField;
        this.optionalMapField = optionalMapField;
        this.binaryField = binaryField;
        this.longField = longField;
        this.adaptedLongField = adaptedLongField;
        this.doubleAdaptedField = doubleAdaptedField;
        this.adaptedList = adaptedList;
        this.adaptedSet = adaptedSet;
        this.adaptedMap = adaptedMap;
        this.adaptedListNested = adaptedListNested;
    }
    
    @ThriftConstructor
    protected Foo() {
      this.intField = 0;
      this.optionalIntField = null;
      this.intFieldWithDefault = 13;
      this.setField = null;
      this.optionalSetField = null;
      this.mapField = null;
      this.optionalMapField = null;
      this.binaryField = null;
      this.longField = 0L;
      this.adaptedLongField = 0L;
      this.doubleAdaptedField = 0L;
      this.adaptedList = null;
      this.adaptedSet = null;
      this.adaptedMap = null;
      this.adaptedListNested = null;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static Builder builder(Foo other) {
      return new Builder(other);
    }

    public static class Builder {
        private int intField = 0;
        private Integer optionalIntField = null;
        private int intFieldWithDefault = 13;
        private Set<String> setField = null;
        private Set<String> optionalSetField = null;
        private Map<String, List<String>> mapField = null;
        private Map<String, List<String>> optionalMapField = null;
        private byte[] binaryField = null;
        private long longField = 0L;
        private long adaptedLongField = 0L;
        private long doubleAdaptedField = 0L;
        private List<Integer> adaptedList = null;
        private Set<Integer> adaptedSet = null;
        private Map<String, Integer> adaptedMap = null;
        private List<List<Map<Integer, Integer>>> adaptedListNested = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="intField", requiredness=Requiredness.NONE)    public Builder setIntField(int intField) {
            this.intField = intField;
            return this;
        }
    
        public int getIntField() { return intField; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="optionalIntField", requiredness=Requiredness.OPTIONAL)    public Builder setOptionalIntField(Integer optionalIntField) {
            this.optionalIntField = optionalIntField;
            return this;
        }
    
        public Integer getOptionalIntField() { return optionalIntField; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="intFieldWithDefault", requiredness=Requiredness.NONE)    public Builder setIntFieldWithDefault(int intFieldWithDefault) {
            this.intFieldWithDefault = intFieldWithDefault;
            return this;
        }
    
        public int getIntFieldWithDefault() { return intFieldWithDefault; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="setField", requiredness=Requiredness.NONE)    public Builder setSetField(Set<String> setField) {
            this.setField = setField;
            return this;
        }
    
        public Set<String> getSetField() { return setField; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="optionalSetField", requiredness=Requiredness.OPTIONAL)    public Builder setOptionalSetField(Set<String> optionalSetField) {
            this.optionalSetField = optionalSetField;
            return this;
        }
    
        public Set<String> getOptionalSetField() { return optionalSetField; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="mapField", requiredness=Requiredness.NONE)    public Builder setMapField(Map<String, List<String>> mapField) {
            this.mapField = mapField;
            return this;
        }
    
        public Map<String, List<String>> getMapField() { return mapField; }
    
            @com.facebook.swift.codec.ThriftField(value=7, name="optionalMapField", requiredness=Requiredness.OPTIONAL)    public Builder setOptionalMapField(Map<String, List<String>> optionalMapField) {
            this.optionalMapField = optionalMapField;
            return this;
        }
    
        public Map<String, List<String>> getOptionalMapField() { return optionalMapField; }
    
            @com.facebook.swift.codec.ThriftField(value=8, name="binaryField", requiredness=Requiredness.NONE)    public Builder setBinaryField(byte[] binaryField) {
            this.binaryField = binaryField;
            return this;
        }
    
        public byte[] getBinaryField() { return binaryField; }
    
            @com.facebook.swift.codec.ThriftField(value=9, name="longField", requiredness=Requiredness.NONE)    public Builder setLongField(long longField) {
            this.longField = longField;
            return this;
        }
    
        public long getLongField() { return longField; }
    
            @com.facebook.swift.codec.ThriftField(value=10, name="adaptedLongField", requiredness=Requiredness.NONE)    public Builder setAdaptedLongField(long adaptedLongField) {
            this.adaptedLongField = adaptedLongField;
            return this;
        }
    
        public long getAdaptedLongField() { return adaptedLongField; }
    
            @com.facebook.swift.codec.ThriftField(value=11, name="doubleAdaptedField", requiredness=Requiredness.NONE)    public Builder setDoubleAdaptedField(long doubleAdaptedField) {
            this.doubleAdaptedField = doubleAdaptedField;
            return this;
        }
    
        public long getDoubleAdaptedField() { return doubleAdaptedField; }
    
            @com.facebook.swift.codec.ThriftField(value=12, name="adapted_list", requiredness=Requiredness.NONE)    public Builder setAdaptedList(List<Integer> adaptedList) {
            this.adaptedList = adaptedList;
            return this;
        }
    
        public List<Integer> getAdaptedList() { return adaptedList; }
    
            @com.facebook.swift.codec.ThriftField(value=13, name="adapted_set", requiredness=Requiredness.NONE)    public Builder setAdaptedSet(Set<Integer> adaptedSet) {
            this.adaptedSet = adaptedSet;
            return this;
        }
    
        public Set<Integer> getAdaptedSet() { return adaptedSet; }
    
            @com.facebook.swift.codec.ThriftField(value=14, name="adapted_map", requiredness=Requiredness.NONE)    public Builder setAdaptedMap(Map<String, Integer> adaptedMap) {
            this.adaptedMap = adaptedMap;
            return this;
        }
    
        public Map<String, Integer> getAdaptedMap() { return adaptedMap; }
    
            @com.facebook.swift.codec.ThriftField(value=15, name="adapted_list_nested", requiredness=Requiredness.NONE)    public Builder setAdaptedListNested(List<List<Map<Integer, Integer>>> adaptedListNested) {
            this.adaptedListNested = adaptedListNested;
            return this;
        }
    
        public List<List<Map<Integer, Integer>>> getAdaptedListNested() { return adaptedListNested; }
    
        public Builder() { }
        public Builder(Foo other) {
            this.intField = other.intField;
            this.optionalIntField = other.optionalIntField;
            this.intFieldWithDefault = other.intFieldWithDefault;
            this.setField = other.setField;
            this.optionalSetField = other.optionalSetField;
            this.mapField = other.mapField;
            this.optionalMapField = other.optionalMapField;
            this.binaryField = other.binaryField;
            this.longField = other.longField;
            this.adaptedLongField = other.adaptedLongField;
            this.doubleAdaptedField = other.doubleAdaptedField;
            this.adaptedList = other.adaptedList;
            this.adaptedSet = other.adaptedSet;
            this.adaptedMap = other.adaptedMap;
            this.adaptedListNested = other.adaptedListNested;
        }
    
        @ThriftConstructor
        public Foo build() {
            Foo result = new Foo (
                this.intField,
                this.optionalIntField,
                this.intFieldWithDefault,
                this.setField,
                this.optionalSetField,
                this.mapField,
                this.optionalMapField,
                this.binaryField,
                this.longField,
                this.adaptedLongField,
                this.doubleAdaptedField,
                this.adaptedList,
                this.adaptedSet,
                this.adaptedMap,
                this.adaptedListNested
            );
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap<>();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap<>();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("Foo");
    private final int intField;
    public static final int _INTFIELD = 1;
    private static final TField INT_FIELD_FIELD_DESC = new TField("intField", TType.I32, (short)1);
        private final Integer optionalIntField;
    public static final int _OPTIONALINTFIELD = 2;
    private static final TField OPTIONAL_INT_FIELD_FIELD_DESC = new TField("optionalIntField", TType.I32, (short)2);
        private final int intFieldWithDefault;
    public static final int _INTFIELDWITHDEFAULT = 3;
    private static final TField INT_FIELD_WITH_DEFAULT_FIELD_DESC = new TField("intFieldWithDefault", TType.I32, (short)3);
        private final Set<String> setField;
    public static final int _SETFIELD = 4;
    private static final TField SET_FIELD_FIELD_DESC = new TField("setField", TType.SET, (short)4);
        private final Set<String> optionalSetField;
    public static final int _OPTIONALSETFIELD = 5;
    private static final TField OPTIONAL_SET_FIELD_FIELD_DESC = new TField("optionalSetField", TType.SET, (short)5);
        private final Map<String, List<String>> mapField;
    public static final int _MAPFIELD = 6;
    private static final TField MAP_FIELD_FIELD_DESC = new TField("mapField", TType.MAP, (short)6);
        private final Map<String, List<String>> optionalMapField;
    public static final int _OPTIONALMAPFIELD = 7;
    private static final TField OPTIONAL_MAP_FIELD_FIELD_DESC = new TField("optionalMapField", TType.MAP, (short)7);
        private final byte[] binaryField;
    public static final int _BINARYFIELD = 8;
    private static final TField BINARY_FIELD_FIELD_DESC = new TField("binaryField", TType.STRING, (short)8);
        private final long longField;
    public static final int _LONGFIELD = 9;
    private static final TField LONG_FIELD_FIELD_DESC = new TField("longField", TType.I64, (short)9);
        private final long adaptedLongField;
    public static final int _ADAPTEDLONGFIELD = 10;
    private static final TField ADAPTED_LONG_FIELD_FIELD_DESC = new TField("adaptedLongField", TType.I64, (short)10);
        private final long doubleAdaptedField;
    public static final int _DOUBLEADAPTEDFIELD = 11;
    private static final TField DOUBLE_ADAPTED_FIELD_FIELD_DESC = new TField("doubleAdaptedField", TType.I64, (short)11);
        private final List<Integer> adaptedList;
    public static final int _ADAPTED_LIST = 12;
    private static final TField ADAPTED_LIST_FIELD_DESC = new TField("adapted_list", TType.LIST, (short)12);
        private final Set<Integer> adaptedSet;
    public static final int _ADAPTED_SET = 13;
    private static final TField ADAPTED_SET_FIELD_DESC = new TField("adapted_set", TType.SET, (short)13);
        private final Map<String, Integer> adaptedMap;
    public static final int _ADAPTED_MAP = 14;
    private static final TField ADAPTED_MAP_FIELD_DESC = new TField("adapted_map", TType.MAP, (short)14);
        private final List<List<Map<Integer, Integer>>> adaptedListNested;
    public static final int _ADAPTED_LIST_NESTED = 15;
    private static final TField ADAPTED_LIST_NESTED_FIELD_DESC = new TField("adapted_list_nested", TType.LIST, (short)15);
    static {
      NAMES_TO_IDS.put("intField", 1);
      THRIFT_NAMES_TO_IDS.put("intField", 1);
      FIELD_METADATA.put(1, INT_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("optionalIntField", 2);
      THRIFT_NAMES_TO_IDS.put("optionalIntField", 2);
      FIELD_METADATA.put(2, OPTIONAL_INT_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("intFieldWithDefault", 3);
      THRIFT_NAMES_TO_IDS.put("intFieldWithDefault", 3);
      FIELD_METADATA.put(3, INT_FIELD_WITH_DEFAULT_FIELD_DESC);
      NAMES_TO_IDS.put("setField", 4);
      THRIFT_NAMES_TO_IDS.put("setField", 4);
      FIELD_METADATA.put(4, SET_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("optionalSetField", 5);
      THRIFT_NAMES_TO_IDS.put("optionalSetField", 5);
      FIELD_METADATA.put(5, OPTIONAL_SET_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("mapField", 6);
      THRIFT_NAMES_TO_IDS.put("mapField", 6);
      FIELD_METADATA.put(6, MAP_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("optionalMapField", 7);
      THRIFT_NAMES_TO_IDS.put("optionalMapField", 7);
      FIELD_METADATA.put(7, OPTIONAL_MAP_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("binaryField", 8);
      THRIFT_NAMES_TO_IDS.put("binaryField", 8);
      FIELD_METADATA.put(8, BINARY_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("longField", 9);
      THRIFT_NAMES_TO_IDS.put("longField", 9);
      FIELD_METADATA.put(9, LONG_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("adaptedLongField", 10);
      THRIFT_NAMES_TO_IDS.put("adaptedLongField", 10);
      FIELD_METADATA.put(10, ADAPTED_LONG_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("doubleAdaptedField", 11);
      THRIFT_NAMES_TO_IDS.put("doubleAdaptedField", 11);
      FIELD_METADATA.put(11, DOUBLE_ADAPTED_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("adaptedList", 12);
      THRIFT_NAMES_TO_IDS.put("adapted_list", 12);
      FIELD_METADATA.put(12, ADAPTED_LIST_FIELD_DESC);
      NAMES_TO_IDS.put("adaptedSet", 13);
      THRIFT_NAMES_TO_IDS.put("adapted_set", 13);
      FIELD_METADATA.put(13, ADAPTED_SET_FIELD_DESC);
      NAMES_TO_IDS.put("adaptedMap", 14);
      THRIFT_NAMES_TO_IDS.put("adapted_map", 14);
      FIELD_METADATA.put(14, ADAPTED_MAP_FIELD_DESC);
      NAMES_TO_IDS.put("adaptedListNested", 15);
      THRIFT_NAMES_TO_IDS.put("adapted_list_nested", 15);
      FIELD_METADATA.put(15, ADAPTED_LIST_NESTED_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("facebook.com/thrift/compiler/test/fixtures/adapter/src/module/Foo"),
        Foo.class, Foo::read0));
    }
    
    
    @com.facebook.swift.codec.ThriftField(value=1, name="intField", requiredness=Requiredness.NONE)
    public int getIntField() { return intField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="optionalIntField", requiredness=Requiredness.OPTIONAL)
    public Integer getOptionalIntField() { return optionalIntField; }

    
    
    @com.facebook.swift.codec.ThriftField(value=3, name="intFieldWithDefault", requiredness=Requiredness.NONE)
    public int getIntFieldWithDefault() { return intFieldWithDefault; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="setField", requiredness=Requiredness.NONE)
    public Set<String> getSetField() { return setField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="optionalSetField", requiredness=Requiredness.OPTIONAL)
    public Set<String> getOptionalSetField() { return optionalSetField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="mapField", requiredness=Requiredness.NONE)
    public Map<String, List<String>> getMapField() { return mapField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=7, name="optionalMapField", requiredness=Requiredness.OPTIONAL)
    public Map<String, List<String>> getOptionalMapField() { return optionalMapField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=8, name="binaryField", requiredness=Requiredness.NONE)
    public byte[] getBinaryField() { return binaryField; }

    
    
    @com.facebook.swift.codec.ThriftField(value=9, name="longField", requiredness=Requiredness.NONE)
    public long getLongField() { return longField; }

    
    
    @com.facebook.swift.codec.ThriftField(value=10, name="adaptedLongField", requiredness=Requiredness.NONE)
    public long getAdaptedLongField() { return adaptedLongField; }

    
    
    @com.facebook.swift.codec.ThriftField(value=11, name="doubleAdaptedField", requiredness=Requiredness.NONE)
    public long getDoubleAdaptedField() { return doubleAdaptedField; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=12, name="adapted_list", requiredness=Requiredness.NONE)
    public List<Integer> getAdaptedList() { return adaptedList; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=13, name="adapted_set", requiredness=Requiredness.NONE)
    public Set<Integer> getAdaptedSet() { return adaptedSet; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=14, name="adapted_map", requiredness=Requiredness.NONE)
    public Map<String, Integer> getAdaptedMap() { return adaptedMap; }

    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=15, name="adapted_list_nested", requiredness=Requiredness.NONE)
    public List<List<Map<Integer, Integer>>> getAdaptedListNested() { return adaptedListNested; }

    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("intField", intField);
        helper.add("optionalIntField", optionalIntField);
        helper.add("intFieldWithDefault", intFieldWithDefault);
        helper.add("setField", setField);
        helper.add("optionalSetField", optionalSetField);
        helper.add("mapField", mapField);
        helper.add("optionalMapField", optionalMapField);
        helper.add("binaryField", binaryField);
        helper.add("longField", longField);
        helper.add("adaptedLongField", adaptedLongField);
        helper.add("doubleAdaptedField", doubleAdaptedField);
        helper.add("adaptedList", adaptedList);
        helper.add("adaptedSet", adaptedSet);
        helper.add("adaptedMap", adaptedMap);
        helper.add("adaptedListNested", adaptedListNested);
        return helper.toString();
    }

    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Foo other = (Foo)o;
    
        return
            Objects.equals(intField, other.intField) &&
            Objects.equals(optionalIntField, other.optionalIntField) &&
            Objects.equals(intFieldWithDefault, other.intFieldWithDefault) &&
            Objects.equals(setField, other.setField) &&
            Objects.equals(optionalSetField, other.optionalSetField) &&
            Objects.equals(mapField, other.mapField) &&
            Objects.equals(optionalMapField, other.optionalMapField) &&
            Arrays.equals(binaryField, other.binaryField) &&
            Objects.equals(longField, other.longField) &&
            Objects.equals(adaptedLongField, other.adaptedLongField) &&
            Objects.equals(doubleAdaptedField, other.doubleAdaptedField) &&
            Objects.equals(adaptedList, other.adaptedList) &&
            Objects.equals(adaptedSet, other.adaptedSet) &&
            Objects.equals(adaptedMap, other.adaptedMap) &&
            Objects.equals(adaptedListNested, other.adaptedListNested) &&
            true;
    }

    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            intField,
            optionalIntField,
            intFieldWithDefault,
            setField,
            optionalSetField,
            mapField,
            optionalMapField,
            binaryField,
            longField,
            adaptedLongField,
            doubleAdaptedField,
            adaptedList,
            adaptedSet,
            adaptedMap,
            adaptedListNested
        });
    }

    
    public static com.facebook.thrift.payload.Reader<Foo> asReader() {
      return Foo::read0;
    }
    
    public static Foo read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(Foo.NAMES_TO_IDS, Foo.THRIFT_NAMES_TO_IDS, Foo.FIELD_METADATA);
      Foo.Builder builder = new Foo.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _INTFIELD:
          if (__field.type == TType.I32) {
            int intField = oprot.readI32();
            builder.setIntField(intField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTIONALINTFIELD:
          if (__field.type == TType.I32) {
            Integer  optionalIntField = oprot.readI32();
            builder.setOptionalIntField(optionalIntField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _INTFIELDWITHDEFAULT:
          if (__field.type == TType.I32) {
            int intFieldWithDefault = oprot.readI32();
            builder.setIntFieldWithDefault(intFieldWithDefault);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SETFIELD:
          if (__field.type == TType.SET) {
            Set<String> setField;
                {
                TSet _set = oprot.readSetBegin();
                setField = new HashSet<String>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    String _value1 = oprot.readString();
                    setField.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setSetField(setField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTIONALSETFIELD:
          if (__field.type == TType.SET) {
            Set<String> optionalSetField;
                {
                TSet _set = oprot.readSetBegin();
                optionalSetField = new HashSet<String>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    String _value1 = oprot.readString();
                    optionalSetField.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setOptionalSetField(optionalSetField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAPFIELD:
          if (__field.type == TType.MAP) {
            Map<String, List<String>> mapField;
                {
                TMap _map = oprot.readMapBegin();
                mapField = new HashMap<String, List<String>>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    List<String> _value1;
                                {
                                TList _list1 = oprot.readListBegin();
                                _value1 = new ArrayList<String>(Math.max(0, _list1.size));
                                for (int _i1 = 0; (_list1.size < 0) ? oprot.peekList() : (_i1 < _list1.size); _i1++) {
                                    
                                    
                                    String _value2 = oprot.readString();
                                    
                                    
                                    _value1.add(_value2);
                                    
                                }
                                oprot.readListEnd();
                                }
                    mapField.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setMapField(mapField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPTIONALMAPFIELD:
          if (__field.type == TType.MAP) {
            Map<String, List<String>> optionalMapField;
                {
                TMap _map = oprot.readMapBegin();
                optionalMapField = new HashMap<String, List<String>>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    List<String> _value1;
                                {
                                TList _list1 = oprot.readListBegin();
                                _value1 = new ArrayList<String>(Math.max(0, _list1.size));
                                for (int _i1 = 0; (_list1.size < 0) ? oprot.peekList() : (_i1 < _list1.size); _i1++) {
                                    
                                    
                                    String _value2 = oprot.readString();
                                    
                                    
                                    _value1.add(_value2);
                                    
                                }
                                oprot.readListEnd();
                                }
                    optionalMapField.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setOptionalMapField(optionalMapField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _BINARYFIELD:
          if (__field.type == TType.STRING) {
            byte[] binaryField = oprot.readBinary().array();
            builder.setBinaryField(binaryField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _LONGFIELD:
          if (__field.type == TType.I64) {
            long longField = oprot.readI64();
            builder.setLongField(longField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADAPTEDLONGFIELD:
          if (__field.type == TType.I64) {
            long adaptedLongField = oprot.readI64();
            builder.setAdaptedLongField(adaptedLongField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _DOUBLEADAPTEDFIELD:
          if (__field.type == TType.I64) {
            long doubleAdaptedField = oprot.readI64();
            builder.setDoubleAdaptedField(doubleAdaptedField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADAPTED_LIST:
          if (__field.type == TType.LIST) {
            List<Integer> adaptedList;
                {
                TList _list = oprot.readListBegin();
                adaptedList = new ArrayList<Integer>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    int _value1 = oprot.readI32();
                    adaptedList.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setAdaptedList(adaptedList);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADAPTED_SET:
          if (__field.type == TType.SET) {
            Set<Integer> adaptedSet;
                {
                TSet _set = oprot.readSetBegin();
                adaptedSet = new HashSet<Integer>(Math.max(0, _set.size));
                for (int _i = 0; (_set.size < 0) ? oprot.peekSet() : (_i < _set.size); _i++) {
                    
                    int _value1 = oprot.readI32();
                    adaptedSet.add(_value1);
                }
                oprot.readSetEnd();
                }
            builder.setAdaptedSet(adaptedSet);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADAPTED_MAP:
          if (__field.type == TType.MAP) {
            Map<String, Integer> adaptedMap;
                {
                TMap _map = oprot.readMapBegin();
                adaptedMap = new HashMap<String, Integer>(Math.max(0, _map.size));
                for (int _i = 0; (_map.size < 0) ? oprot.peekMap() : (_i < _map.size); _i++) {
                    
                    String _key1 = oprot.readString();
                    int _value1 = oprot.readI32();
                    adaptedMap.put(_key1, _value1);
                }
                }
                oprot.readMapEnd();
            builder.setAdaptedMap(adaptedMap);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADAPTED_LIST_NESTED:
          if (__field.type == TType.LIST) {
            List<List<Map<Integer, Integer>>> adaptedListNested;
                {
                TList _list = oprot.readListBegin();
                adaptedListNested = new ArrayList<List<Map<Integer, Integer>>>(Math.max(0, _list.size));
                for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                    
                    List<Map<Integer, Integer>> _value1;
                                {
                                TList _list1 = oprot.readListBegin();
                                _value1 = new ArrayList<Map<Integer, Integer>>(Math.max(0, _list1.size));
                                for (int _i1 = 0; (_list1.size < 0) ? oprot.peekList() : (_i1 < _list1.size); _i1++) {
                                    
                                    Map<Integer, Integer> _value2;
                                {
                                TMap _map2 = oprot.readMapBegin();
                                _value2 = new HashMap<Integer, Integer>(Math.max(0, _map2.size));
                                for (int _i2 = 0; (_map2.size < 0) ? oprot.peekMap() : (_i2 < _map2.size); _i2++) {
                                    
                                    
                                    int _key3 = oprot.readI32();
                                    
                    
                                    
                                    int _value3 = oprot.readI32();
                                    
                                    
                                    _value2.put(_key3, _value3);
                                    
                                }
                                }
                                oprot.readMapEnd();
                    
                                    
                                    _value1.add(_value2);
                                    
                                }
                                oprot.readListEnd();
                                }
    adaptedListNested.add(_value1);
                }
                oprot.readListEnd();
                }
            builder.setAdaptedListNested(adaptedListNested);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }

    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INT_FIELD_FIELD_DESC);
      oprot.writeI32(this.intField);
      oprot.writeFieldEnd();
      if (optionalIntField != null) {
        oprot.writeFieldBegin(OPTIONAL_INT_FIELD_FIELD_DESC);
        oprot.writeI32(this.optionalIntField);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INT_FIELD_WITH_DEFAULT_FIELD_DESC);
      oprot.writeI32(this.intFieldWithDefault);
      oprot.writeFieldEnd();
      if (setField != null) {
        oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
        Set<String> _iter0 = setField;
        oprot.writeSetBegin(new TSet(TType.STRING, _iter0.size()));
            for (String _iter1 : _iter0) {
              oprot.writeString(_iter1);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (optionalSetField != null) {
        oprot.writeFieldBegin(OPTIONAL_SET_FIELD_FIELD_DESC);
        Set<String>  _iter0 = optionalSetField;
        oprot.writeSetBegin(new TSet(TType.STRING, _iter0.size()));
            for (String _iter1 : _iter0) {
              oprot.writeString(_iter1);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (mapField != null) {
        oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
        Map<String, List<String>> _iter0 = mapField;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
            for (Map.Entry<String, List<String>> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeListBegin(new TList(TType.STRING, _iter1.getValue().size()));
            for (String _iter2 : _iter1.getValue()) {
              oprot.writeString(_iter2);
            }
            oprot.writeListEnd();
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (optionalMapField != null) {
        oprot.writeFieldBegin(OPTIONAL_MAP_FIELD_FIELD_DESC);
        Map<String, List<String>>  _iter0 = optionalMapField;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter0.size()));
            for (Map.Entry<String, List<String>> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeListBegin(new TList(TType.STRING, _iter1.getValue().size()));
            for (String _iter2 : _iter1.getValue()) {
              oprot.writeString(_iter2);
            }
            oprot.writeListEnd();
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (binaryField != null) {
        oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
        oprot.writeBinary(java.nio.ByteBuffer.wrap(this.binaryField));
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LONG_FIELD_FIELD_DESC);
      oprot.writeI64(this.longField);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADAPTED_LONG_FIELD_FIELD_DESC);
      oprot.writeI64(this.adaptedLongField);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_ADAPTED_FIELD_FIELD_DESC);
      oprot.writeI64(this.doubleAdaptedField);
      oprot.writeFieldEnd();
      if (adaptedList != null) {
        oprot.writeFieldBegin(ADAPTED_LIST_FIELD_DESC);
        List<Integer> _iter0 = adaptedList;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
            for (int _iter1 : _iter0) {
              oprot.writeI32(_iter1);
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (adaptedSet != null) {
        oprot.writeFieldBegin(ADAPTED_SET_FIELD_DESC);
        Set<Integer> _iter0 = adaptedSet;
        oprot.writeSetBegin(new TSet(TType.I32, _iter0.size()));
            for (int _iter1 : _iter0) {
              oprot.writeI32(_iter1);
            }
            oprot.writeSetEnd();
        oprot.writeFieldEnd();
      }
      if (adaptedMap != null) {
        oprot.writeFieldBegin(ADAPTED_MAP_FIELD_DESC);
        Map<String, Integer> _iter0 = adaptedMap;
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter0.size()));
            for (Map.Entry<String, Integer> _iter1 : _iter0.entrySet()) {
              oprot.writeString(_iter1.getKey());
              oprot.writeI32(_iter1.getValue());
            }
            oprot.writeMapEnd();
        oprot.writeFieldEnd();
      }
      if (adaptedListNested != null) {
        oprot.writeFieldBegin(ADAPTED_LIST_NESTED_FIELD_DESC);
        List<List<Map<Integer, Integer>>> _iter0 = adaptedListNested;
        oprot.writeListBegin(new TList(TType.LIST, _iter0.size()));
            for (List<Map<Integer, Integer>> _iter1 : _iter0) {
              oprot.writeListBegin(new TList(TType.MAP, _iter1.size()));
            for (Map<Integer, Integer> _iter2 : _iter1) {
              oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter2.size()));
            for (Map.Entry<Integer, Integer> _iter3 : _iter2.entrySet()) {
              oprot.writeI32(_iter3.getKey());
              oprot.writeI32(_iter3.getValue());
            }
            oprot.writeMapEnd();
            }
            oprot.writeListEnd();
            }
            oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    private static class _FooLazy {
        private static final Foo _DEFAULT = new Foo.Builder().build();
    }
    
    public static Foo defaultInstance() {
        return  _FooLazy._DEFAULT;
    }
}
