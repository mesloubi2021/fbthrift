/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.adapter;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Foo implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Foo");
  private static final TField INT_FIELD_FIELD_DESC = new TField("intField", TType.I32, (short)1);
  private static final TField OPTIONAL_INT_FIELD_FIELD_DESC = new TField("optionalIntField", TType.I32, (short)2);
  private static final TField INT_FIELD_WITH_DEFAULT_FIELD_DESC = new TField("intFieldWithDefault", TType.I32, (short)3);
  private static final TField SET_FIELD_FIELD_DESC = new TField("setField", TType.SET, (short)4);
  private static final TField OPTIONAL_SET_FIELD_FIELD_DESC = new TField("optionalSetField", TType.SET, (short)5);
  private static final TField MAP_FIELD_FIELD_DESC = new TField("mapField", TType.MAP, (short)6);
  private static final TField OPTIONAL_MAP_FIELD_FIELD_DESC = new TField("optionalMapField", TType.MAP, (short)7);
  private static final TField BINARY_FIELD_FIELD_DESC = new TField("binaryField", TType.STRING, (short)8);
  private static final TField LONG_FIELD_FIELD_DESC = new TField("longField", TType.I64, (short)9);
  private static final TField ADAPTED_LONG_FIELD_FIELD_DESC = new TField("adaptedLongField", TType.I64, (short)10);
  private static final TField DOUBLE_ADAPTED_FIELD_FIELD_DESC = new TField("doubleAdaptedField", TType.I64, (short)11);
  private static final TField ADAPTED_LIST_FIELD_DESC = new TField("adapted_list", TType.LIST, (short)12);
  private static final TField ADAPTED_SET_FIELD_DESC = new TField("adapted_set", TType.SET, (short)13);
  private static final TField ADAPTED_MAP_FIELD_DESC = new TField("adapted_map", TType.MAP, (short)14);
  private static final TField ADAPTED_LIST_NESTED_FIELD_DESC = new TField("adapted_list_nested", TType.LIST, (short)15);

  public final Integer intField;
  public final Integer optionalIntField;
  public final Integer intFieldWithDefault;
  public final Set<String> setField;
  public final Set<String> optionalSetField;
  public final Map<String,List<String>> mapField;
  public final Map<String,List<String>> optionalMapField;
  public final byte[] binaryField;
  public final Long longField;
  public final Long adaptedLongField;
  public final Long doubleAdaptedField;
  public final List<Integer> adapted_list;
  public final Set<Integer> adapted_set;
  public final Map<String,Integer> adapted_map;
  public final List<List<Map<Integer,Integer>>> adapted_list_nested;
  public static final int INTFIELD = 1;
  public static final int OPTIONALINTFIELD = 2;
  public static final int INTFIELDWITHDEFAULT = 3;
  public static final int SETFIELD = 4;
  public static final int OPTIONALSETFIELD = 5;
  public static final int MAPFIELD = 6;
  public static final int OPTIONALMAPFIELD = 7;
  public static final int BINARYFIELD = 8;
  public static final int LONGFIELD = 9;
  public static final int ADAPTEDLONGFIELD = 10;
  public static final int DOUBLEADAPTEDFIELD = 11;
  public static final int ADAPTED_LIST = 12;
  public static final int ADAPTED_SET = 13;
  public static final int ADAPTED_MAP = 14;
  public static final int ADAPTED_LIST_NESTED = 15;

  public Foo(
      Integer intField,
      Integer optionalIntField,
      Integer intFieldWithDefault,
      Set<String> setField,
      Set<String> optionalSetField,
      Map<String,List<String>> mapField,
      Map<String,List<String>> optionalMapField,
      byte[] binaryField,
      Long longField,
      Long adaptedLongField,
      Long doubleAdaptedField,
      List<Integer> adapted_list,
      Set<Integer> adapted_set,
      Map<String,Integer> adapted_map,
      List<List<Map<Integer,Integer>>> adapted_list_nested) {
    this.intField = intField;
    this.optionalIntField = optionalIntField;
    this.intFieldWithDefault = intFieldWithDefault;
    this.setField = setField;
    this.optionalSetField = optionalSetField;
    this.mapField = mapField;
    this.optionalMapField = optionalMapField;
    this.binaryField = binaryField;
    this.longField = longField;
    this.adaptedLongField = adaptedLongField;
    this.doubleAdaptedField = doubleAdaptedField;
    this.adapted_list = adapted_list;
    this.adapted_set = adapted_set;
    this.adapted_map = adapted_map;
    this.adapted_list_nested = adapted_list_nested;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Foo(Foo other) {
    if (other.isSetIntField()) {
      this.intField = TBaseHelper.deepCopy(other.intField);
    } else {
      this.intField = null;
    }
    if (other.isSetOptionalIntField()) {
      this.optionalIntField = TBaseHelper.deepCopy(other.optionalIntField);
    } else {
      this.optionalIntField = null;
    }
    if (other.isSetIntFieldWithDefault()) {
      this.intFieldWithDefault = TBaseHelper.deepCopy(other.intFieldWithDefault);
    } else {
      this.intFieldWithDefault = null;
    }
    if (other.isSetSetField()) {
      this.setField = TBaseHelper.deepCopy(other.setField);
    } else {
      this.setField = null;
    }
    if (other.isSetOptionalSetField()) {
      this.optionalSetField = TBaseHelper.deepCopy(other.optionalSetField);
    } else {
      this.optionalSetField = null;
    }
    if (other.isSetMapField()) {
      this.mapField = TBaseHelper.deepCopy(other.mapField);
    } else {
      this.mapField = null;
    }
    if (other.isSetOptionalMapField()) {
      this.optionalMapField = TBaseHelper.deepCopy(other.optionalMapField);
    } else {
      this.optionalMapField = null;
    }
    if (other.isSetBinaryField()) {
      this.binaryField = TBaseHelper.deepCopy(other.binaryField);
    } else {
      this.binaryField = null;
    }
    if (other.isSetLongField()) {
      this.longField = TBaseHelper.deepCopy(other.longField);
    } else {
      this.longField = null;
    }
    if (other.isSetAdaptedLongField()) {
      this.adaptedLongField = TBaseHelper.deepCopy(other.adaptedLongField);
    } else {
      this.adaptedLongField = null;
    }
    if (other.isSetDoubleAdaptedField()) {
      this.doubleAdaptedField = TBaseHelper.deepCopy(other.doubleAdaptedField);
    } else {
      this.doubleAdaptedField = null;
    }
    if (other.isSetAdapted_list()) {
      this.adapted_list = TBaseHelper.deepCopy(other.adapted_list);
    } else {
      this.adapted_list = null;
    }
    if (other.isSetAdapted_set()) {
      this.adapted_set = TBaseHelper.deepCopy(other.adapted_set);
    } else {
      this.adapted_set = null;
    }
    if (other.isSetAdapted_map()) {
      this.adapted_map = TBaseHelper.deepCopy(other.adapted_map);
    } else {
      this.adapted_map = null;
    }
    if (other.isSetAdapted_list_nested()) {
      this.adapted_list_nested = TBaseHelper.deepCopy(other.adapted_list_nested);
    } else {
      this.adapted_list_nested = null;
    }
  }

  public Foo deepCopy() {
    return new Foo(this);
  }

  public Integer getIntField() {
    return this.intField;
  }

  // Returns true if field intField is set (has been assigned a value) and false otherwise
  public boolean isSetIntField() {
    return this.intField != null;
  }

  public Integer getOptionalIntField() {
    return this.optionalIntField;
  }

  // Returns true if field optionalIntField is set (has been assigned a value) and false otherwise
  public boolean isSetOptionalIntField() {
    return this.optionalIntField != null;
  }

  public Integer getIntFieldWithDefault() {
    return this.intFieldWithDefault;
  }

  // Returns true if field intFieldWithDefault is set (has been assigned a value) and false otherwise
  public boolean isSetIntFieldWithDefault() {
    return this.intFieldWithDefault != null;
  }

  public Set<String> getSetField() {
    return this.setField;
  }

  // Returns true if field setField is set (has been assigned a value) and false otherwise
  public boolean isSetSetField() {
    return this.setField != null;
  }

  public Set<String> getOptionalSetField() {
    return this.optionalSetField;
  }

  // Returns true if field optionalSetField is set (has been assigned a value) and false otherwise
  public boolean isSetOptionalSetField() {
    return this.optionalSetField != null;
  }

  public Map<String,List<String>> getMapField() {
    return this.mapField;
  }

  // Returns true if field mapField is set (has been assigned a value) and false otherwise
  public boolean isSetMapField() {
    return this.mapField != null;
  }

  public Map<String,List<String>> getOptionalMapField() {
    return this.optionalMapField;
  }

  // Returns true if field optionalMapField is set (has been assigned a value) and false otherwise
  public boolean isSetOptionalMapField() {
    return this.optionalMapField != null;
  }

  public byte[] getBinaryField() {
    return this.binaryField;
  }

  // Returns true if field binaryField is set (has been assigned a value) and false otherwise
  public boolean isSetBinaryField() {
    return this.binaryField != null;
  }

  public Long getLongField() {
    return this.longField;
  }

  // Returns true if field longField is set (has been assigned a value) and false otherwise
  public boolean isSetLongField() {
    return this.longField != null;
  }

  public Long getAdaptedLongField() {
    return this.adaptedLongField;
  }

  // Returns true if field adaptedLongField is set (has been assigned a value) and false otherwise
  public boolean isSetAdaptedLongField() {
    return this.adaptedLongField != null;
  }

  public Long getDoubleAdaptedField() {
    return this.doubleAdaptedField;
  }

  // Returns true if field doubleAdaptedField is set (has been assigned a value) and false otherwise
  public boolean isSetDoubleAdaptedField() {
    return this.doubleAdaptedField != null;
  }

  public List<Integer> getAdapted_list() {
    return this.adapted_list;
  }

  // Returns true if field adapted_list is set (has been assigned a value) and false otherwise
  public boolean isSetAdapted_list() {
    return this.adapted_list != null;
  }

  public Set<Integer> getAdapted_set() {
    return this.adapted_set;
  }

  // Returns true if field adapted_set is set (has been assigned a value) and false otherwise
  public boolean isSetAdapted_set() {
    return this.adapted_set != null;
  }

  public Map<String,Integer> getAdapted_map() {
    return this.adapted_map;
  }

  // Returns true if field adapted_map is set (has been assigned a value) and false otherwise
  public boolean isSetAdapted_map() {
    return this.adapted_map != null;
  }

  public List<List<Map<Integer,Integer>>> getAdapted_list_nested() {
    return this.adapted_list_nested;
  }

  // Returns true if field adapted_list_nested is set (has been assigned a value) and false otherwise
  public boolean isSetAdapted_list_nested() {
    return this.adapted_list_nested != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Foo))
      return false;
    Foo that = (Foo)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetIntField(), that.isSetIntField(), this.intField, that.intField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptionalIntField(), that.isSetOptionalIntField(), this.optionalIntField, that.optionalIntField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetIntFieldWithDefault(), that.isSetIntFieldWithDefault(), this.intFieldWithDefault, that.intFieldWithDefault)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetSetField(), that.isSetSetField(), this.setField, that.setField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptionalSetField(), that.isSetOptionalSetField(), this.optionalSetField, that.optionalSetField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMapField(), that.isSetMapField(), this.mapField, that.mapField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptionalMapField(), that.isSetOptionalMapField(), this.optionalMapField, that.optionalMapField)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetBinaryField(), that.isSetBinaryField(), this.binaryField, that.binaryField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetLongField(), that.isSetLongField(), this.longField, that.longField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdaptedLongField(), that.isSetAdaptedLongField(), this.adaptedLongField, that.adaptedLongField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDoubleAdaptedField(), that.isSetDoubleAdaptedField(), this.doubleAdaptedField, that.doubleAdaptedField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdapted_list(), that.isSetAdapted_list(), this.adapted_list, that.adapted_list)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdapted_set(), that.isSetAdapted_set(), this.adapted_set, that.adapted_set)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdapted_map(), that.isSetAdapted_map(), this.adapted_map, that.adapted_map)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAdapted_list_nested(), that.isSetAdapted_list_nested(), this.adapted_list_nested, that.adapted_list_nested)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {intField, optionalIntField, intFieldWithDefault, setField, optionalSetField, mapField, optionalMapField, binaryField, longField, adaptedLongField, doubleAdaptedField, adapted_list, adapted_set, adapted_map, adapted_list_nested});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static Foo deserialize(TProtocol iprot) throws TException {
    Integer tmp_intField = null;
    Integer tmp_optionalIntField = null;
    Integer tmp_intFieldWithDefault = null;
    Set<String> tmp_setField = null;
    Set<String> tmp_optionalSetField = null;
    Map<String,List<String>> tmp_mapField = null;
    Map<String,List<String>> tmp_optionalMapField = null;
    byte[] tmp_binaryField = null;
    Long tmp_longField = null;
    Long tmp_adaptedLongField = null;
    Long tmp_doubleAdaptedField = null;
    List<Integer> tmp_adapted_list = null;
    Set<Integer> tmp_adapted_set = null;
    Map<String,Integer> tmp_adapted_map = null;
    List<List<Map<Integer,Integer>>> tmp_adapted_list_nested = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case INTFIELD:
          if (__field.type == TType.I32) {
            tmp_intField = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONALINTFIELD:
          if (__field.type == TType.I32) {
            tmp_optionalIntField = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case INTFIELDWITHDEFAULT:
          if (__field.type == TType.I32) {
            tmp_intFieldWithDefault = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SETFIELD:
          if (__field.type == TType.SET) {
            {
              TSet _set3 = iprot.readSetBegin();
              tmp_setField = new HashSet<String>(Math.max(0, 2*_set3.size));
              for (int _i4 = 0; 
                   (_set3.size < 0) ? iprot.peekSet() : (_i4 < _set3.size); 
                   ++_i4)
              {
                String _elem5;
                _elem5 = iprot.readString();
                tmp_setField.add(_elem5);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONALSETFIELD:
          if (__field.type == TType.SET) {
            {
              TSet _set6 = iprot.readSetBegin();
              tmp_optionalSetField = new HashSet<String>(Math.max(0, 2*_set6.size));
              for (int _i7 = 0; 
                   (_set6.size < 0) ? iprot.peekSet() : (_i7 < _set6.size); 
                   ++_i7)
              {
                String _elem8;
                _elem8 = iprot.readString();
                tmp_optionalSetField.add(_elem8);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAPFIELD:
          if (__field.type == TType.MAP) {
            {
              TMap _map9 = iprot.readMapBegin();
              tmp_mapField = new HashMap<String,List<String>>(Math.max(0, 2*_map9.size));
              for (int _i10 = 0; 
                   (_map9.size < 0) ? iprot.peekMap() : (_i10 < _map9.size); 
                   ++_i10)
              {
                String _key11;
                List<String> _val12;
                _key11 = iprot.readString();
                {
                  TList _list13 = iprot.readListBegin();
                  _val12 = new ArrayList<String>(Math.max(0, _list13.size));
                  for (int _i14 = 0; 
                       (_list13.size < 0) ? iprot.peekList() : (_i14 < _list13.size); 
                       ++_i14)
                  {
                    String _elem15;
                    _elem15 = iprot.readString();
                    _val12.add(_elem15);
                  }
                  iprot.readListEnd();
                }
                tmp_mapField.put(_key11, _val12);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONALMAPFIELD:
          if (__field.type == TType.MAP) {
            {
              TMap _map16 = iprot.readMapBegin();
              tmp_optionalMapField = new HashMap<String,List<String>>(Math.max(0, 2*_map16.size));
              for (int _i17 = 0; 
                   (_map16.size < 0) ? iprot.peekMap() : (_i17 < _map16.size); 
                   ++_i17)
              {
                String _key18;
                List<String> _val19;
                _key18 = iprot.readString();
                {
                  TList _list20 = iprot.readListBegin();
                  _val19 = new ArrayList<String>(Math.max(0, _list20.size));
                  for (int _i21 = 0; 
                       (_list20.size < 0) ? iprot.peekList() : (_i21 < _list20.size); 
                       ++_i21)
                  {
                    String _elem22;
                    _elem22 = iprot.readString();
                    _val19.add(_elem22);
                  }
                  iprot.readListEnd();
                }
                tmp_optionalMapField.put(_key18, _val19);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARYFIELD:
          if (__field.type == TType.STRING) {
            tmp_binaryField = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case LONGFIELD:
          if (__field.type == TType.I64) {
            tmp_longField = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTEDLONGFIELD:
          if (__field.type == TType.I64) {
            tmp_adaptedLongField = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLEADAPTEDFIELD:
          if (__field.type == TType.I64) {
            tmp_doubleAdaptedField = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTED_LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list23 = iprot.readListBegin();
              tmp_adapted_list = new ArrayList<Integer>(Math.max(0, _list23.size));
              for (int _i24 = 0; 
                   (_list23.size < 0) ? iprot.peekList() : (_i24 < _list23.size); 
                   ++_i24)
              {
                Integer _elem25;
                _elem25 = iprot.readI32();
                tmp_adapted_list.add(_elem25);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTED_SET:
          if (__field.type == TType.SET) {
            {
              TSet _set26 = iprot.readSetBegin();
              tmp_adapted_set = new HashSet<Integer>(Math.max(0, 2*_set26.size));
              for (int _i27 = 0; 
                   (_set26.size < 0) ? iprot.peekSet() : (_i27 < _set26.size); 
                   ++_i27)
              {
                Integer _elem28;
                _elem28 = iprot.readI32();
                tmp_adapted_set.add(_elem28);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTED_MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map29 = iprot.readMapBegin();
              tmp_adapted_map = new HashMap<String,Integer>(Math.max(0, 2*_map29.size));
              for (int _i30 = 0; 
                   (_map29.size < 0) ? iprot.peekMap() : (_i30 < _map29.size); 
                   ++_i30)
              {
                String _key31;
                Integer _val32;
                _key31 = iprot.readString();
                _val32 = iprot.readI32();
                tmp_adapted_map.put(_key31, _val32);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ADAPTED_LIST_NESTED:
          if (__field.type == TType.LIST) {
            {
              TList _list33 = iprot.readListBegin();
              tmp_adapted_list_nested = new ArrayList<List<Map<Integer,Integer>>>(Math.max(0, _list33.size));
              for (int _i34 = 0; 
                   (_list33.size < 0) ? iprot.peekList() : (_i34 < _list33.size); 
                   ++_i34)
              {
                List<Map<Integer,Integer>> _elem35;
                {
                  TList _list36 = iprot.readListBegin();
                  _elem35 = new ArrayList<Map<Integer,Integer>>(Math.max(0, _list36.size));
                  for (int _i37 = 0; 
                       (_list36.size < 0) ? iprot.peekList() : (_i37 < _list36.size); 
                       ++_i37)
                  {
                    Map<Integer,Integer> _elem38;
                    {
                      TMap _map39 = iprot.readMapBegin();
                      _elem38 = new HashMap<Integer,Integer>(Math.max(0, 2*_map39.size));
                      for (int _i40 = 0; 
                           (_map39.size < 0) ? iprot.peekMap() : (_i40 < _map39.size); 
                           ++_i40)
                      {
                        Integer _key41;
                        Integer _val42;
                        _key41 = iprot.readI32();
                        _val42 = iprot.readI32();
                        _elem38.put(_key41, _val42);
                      }
                      iprot.readMapEnd();
                    }
                    _elem35.add(_elem38);
                  }
                  iprot.readListEnd();
                }
                tmp_adapted_list_nested.add(_elem35);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    Foo _that;
    _that = new Foo(
      tmp_intField
      ,tmp_optionalIntField
      ,tmp_intFieldWithDefault
      ,tmp_setField
      ,tmp_optionalSetField
      ,tmp_mapField
      ,tmp_optionalMapField
      ,tmp_binaryField
      ,tmp_longField
      ,tmp_adaptedLongField
      ,tmp_doubleAdaptedField
      ,tmp_adapted_list
      ,tmp_adapted_set
      ,tmp_adapted_map
      ,tmp_adapted_list_nested
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.intField != null) {
      oprot.writeFieldBegin(INT_FIELD_FIELD_DESC);
      oprot.writeI32(this.intField);
      oprot.writeFieldEnd();
    }
    if (this.optionalIntField != null) {
      if (isSetOptionalIntField()) {
        oprot.writeFieldBegin(OPTIONAL_INT_FIELD_FIELD_DESC);
        oprot.writeI32(this.optionalIntField);
        oprot.writeFieldEnd();
      }
    }
    if (this.intFieldWithDefault != null) {
      oprot.writeFieldBegin(INT_FIELD_WITH_DEFAULT_FIELD_DESC);
      oprot.writeI32(this.intFieldWithDefault);
      oprot.writeFieldEnd();
    }
    if (this.setField != null) {
      oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.setField.size()));
        for (String _iter43 : this.setField)        {
          oprot.writeString(_iter43);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.optionalSetField != null) {
      if (isSetOptionalSetField()) {
        oprot.writeFieldBegin(OPTIONAL_SET_FIELD_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.optionalSetField.size()));
          for (String _iter44 : this.optionalSetField)          {
            oprot.writeString(_iter44);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.mapField != null) {
      oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.mapField.size()));
        for (Map.Entry<String, List<String>> _iter45 : this.mapField.entrySet())        {
          oprot.writeString(_iter45.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRING, _iter45.getValue().size()));
            for (String _iter46 : _iter45.getValue())            {
              oprot.writeString(_iter46);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.optionalMapField != null) {
      if (isSetOptionalMapField()) {
        oprot.writeFieldBegin(OPTIONAL_MAP_FIELD_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.optionalMapField.size()));
          for (Map.Entry<String, List<String>> _iter47 : this.optionalMapField.entrySet())          {
            oprot.writeString(_iter47.getKey());
            {
              oprot.writeListBegin(new TList(TType.STRING, _iter47.getValue().size()));
              for (String _iter48 : _iter47.getValue())              {
                oprot.writeString(_iter48);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.binaryField != null) {
      oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
      oprot.writeBinary(this.binaryField);
      oprot.writeFieldEnd();
    }
    if (this.longField != null) {
      oprot.writeFieldBegin(LONG_FIELD_FIELD_DESC);
      oprot.writeI64(this.longField);
      oprot.writeFieldEnd();
    }
    if (this.adaptedLongField != null) {
      oprot.writeFieldBegin(ADAPTED_LONG_FIELD_FIELD_DESC);
      oprot.writeI64(this.adaptedLongField);
      oprot.writeFieldEnd();
    }
    if (this.doubleAdaptedField != null) {
      oprot.writeFieldBegin(DOUBLE_ADAPTED_FIELD_FIELD_DESC);
      oprot.writeI64(this.doubleAdaptedField);
      oprot.writeFieldEnd();
    }
    if (this.adapted_list != null) {
      oprot.writeFieldBegin(ADAPTED_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.adapted_list.size()));
        for (Integer _iter49 : this.adapted_list)        {
          oprot.writeI32(_iter49);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adapted_set != null) {
      oprot.writeFieldBegin(ADAPTED_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.adapted_set.size()));
        for (Integer _iter50 : this.adapted_set)        {
          oprot.writeI32(_iter50);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adapted_map != null) {
      oprot.writeFieldBegin(ADAPTED_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.adapted_map.size()));
        for (Map.Entry<String, Integer> _iter51 : this.adapted_map.entrySet())        {
          oprot.writeString(_iter51.getKey());
          oprot.writeI32(_iter51.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adapted_list_nested != null) {
      oprot.writeFieldBegin(ADAPTED_LIST_NESTED_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.LIST, this.adapted_list_nested.size()));
        for (List<Map<Integer,Integer>> _iter52 : this.adapted_list_nested)        {
          {
            oprot.writeListBegin(new TList(TType.MAP, _iter52.size()));
            for (Map<Integer,Integer> _iter53 : _iter52)            {
              {
                oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter53.size()));
                for (Map.Entry<Integer, Integer> _iter54 : _iter53.entrySet())                {
                  oprot.writeI32(_iter54.getKey());
                  oprot.writeI32(_iter54.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

