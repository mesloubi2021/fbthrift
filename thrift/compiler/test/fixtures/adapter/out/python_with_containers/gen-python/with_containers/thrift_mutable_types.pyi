#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import typing as _typing

import folly.iobuf as _fbthrift_iobuf
import with_containers.thrift_abstract_types as _fbthrift_python_abstract_types
import thrift.python.types as _fbthrift_python_types
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers
import my


class _fbthrift_compatible_with__fbthrift_unadapted_AnnotationWithContainers:
    pass


class _fbthrift_unadapted_AnnotationWithContainers(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_compatible_with__fbthrift_unadapted_AnnotationWithContainers, _fbthrift_python_abstract_types._fbthrift_unadapted_AnnotationWithContainers):
    @property
    def names(self) -> _fbthrift_python_mutable_containers.MutableList[str]: ...
    @names.setter
    def names(self, value: _fbthrift_python_mutable_containers.MutableList[str] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def counts(self) -> _fbthrift_python_mutable_containers.MutableMap[str, int]: ...
    @counts.setter
    def counts(self, value: _fbthrift_python_mutable_containers.MutableMap[str, int] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    def __init__(
        self, *,
        names: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[str] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        counts: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[str, int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        names: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[str] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        counts: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[str, int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[str], _fbthrift_python_mutable_containers.MutableMap[str, int]]]]: ...
    def _to_python(self) -> "with_containers.thrift_types._fbthrift_unadapted_AnnotationWithContainers": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "with_containers.types._fbthrift_unadapted_AnnotationWithContainers": ...  # type: ignore
    def _to_py_deprecated(self) -> "with_containers.ttypes._fbthrift_unadapted_AnnotationWithContainers": ...  # type: ignore
AnnotationWithContainers = my.AdaptedType[_fbthrift_unadapted_AnnotationWithContainers]
_fbthrift_AnnotationWithContainers = AnnotationWithContainers

class _fbthrift_compatible_with__fbthrift_unadapted_MyStruct:
    pass


class _fbthrift_unadapted_MyStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_compatible_with__fbthrift_unadapted_MyStruct, _fbthrift_python_abstract_types._fbthrift_unadapted_MyStruct):
    @property
    def abc(self) -> my.AdaptedType[int]: ...
    @abc.setter
    def abc(self, value: my.AdaptedType[int]) -> None: ...

    def __init__(
        self, *,
        abc: _typing.Optional[my.AdaptedType[int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        abc: _typing.Optional[my.AdaptedType[int]]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[my.AdaptedType[int]]]]: ...
    def _to_python(self) -> "with_containers.thrift_types._fbthrift_unadapted_MyStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "with_containers.types._fbthrift_unadapted_MyStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "with_containers.ttypes._fbthrift_unadapted_MyStruct": ...  # type: ignore
MyStruct = my.AdaptedType[_fbthrift_unadapted_MyStruct]
_fbthrift_MyStruct = MyStruct
